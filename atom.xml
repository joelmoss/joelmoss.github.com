<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Develop With Style</title>
  <link href="http://developwithstyle.com/atom.xml" rel="self"/>
  <link href="http://developwithstyle.com/"/>
  <updated>2011-08-22T19:35:44+01:00</updated>
  <id>http://developwithstyle.com/</id>
  <author>
    <name>Joel Moss</name>
    
  </author>

  
  <entry>
    <title>The Right Way to Create an API</title>
    <link href="http://developwithstyle.com/articles/2011/07/12/the-right-way-to-create-an-api/"/>
    <updated>2011-07-12T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2011/07/12/the-right-way-to-create-an-api</id>
    <content type="html">&lt;p&gt;I know, I know, it's been tooooo long. But whatever!&lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;http:///www.shermanstravel.com&quot;&gt;Shermans&lt;/a&gt; we have begun a large project to rebuild the architecture around the travel deals system. And guess what? we chose to do it all in Ruby! Yay!&lt;/p&gt;

&lt;p&gt;The deals server (as we are calling the entire system) will consist of a few separate apps, mostly Rails. A few of these apps will be REST based web API's, allowing our partners and publishers to fetch deals. Surprisingly, there are very few Ruby Gems available to help with creating an API. But that probably has more to do with the great support for exposing resources built in to Rails using &lt;code&gt;respond_with&lt;/code&gt; and co.&lt;/p&gt;

&lt;p&gt;But based on my experience building the &lt;a href=&quot;http://codaset.com&quot;&gt;Codaset&lt;/a&gt; &lt;a href=&quot;http://api.codaset.com&quot;&gt;API&lt;/a&gt;, I knew I wanted a better way to expose the &quot;views&quot; for the API. For example, I don't want all attributes of my model to be exposed, and Rails doesn't provide a simple way to do that. Enter &lt;a href=&quot;https://github.com/nesquena/rabl&quot;&gt;RABL&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;RABL bills itself as an API templating language, but all it really is, is a way to expose and define your API attributes from within the view itself, which is exactly the way it should be done, as it is only the view that has any concern with this. Exposing or defining the attributes for the API is not the responsibility of the model or even the controller.&lt;/p&gt;

&lt;p&gt;Let's say our controller assigns the &lt;code&gt;@posts&lt;/code&gt; instance variable, which is thusly available in our view, and our view looks like this:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;lang:ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;collection @posts
&lt;/div&gt;&lt;div class='line'&gt;attributes :id, :title, :price
&lt;/div&gt;&lt;div class='line'&gt;child(:user) { attributes :full_name }
&lt;/div&gt;&lt;div class='line'&gt;node(:read) { |post| post.read_by?(@user) }&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;Which would look like this as JSON:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;lang:javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;[{  post :
&lt;/div&gt;&lt;div class='line'&gt;  {
&lt;/div&gt;&lt;div class='line'&gt;    id : 5, title: &quot;...&quot;, subject: &quot;...&quot;,
&lt;/div&gt;&lt;div class='line'&gt;    user : { full_name : &quot;...&quot; },
&lt;/div&gt;&lt;div class='line'&gt;    read : true
&lt;/div&gt;&lt;div class='line'&gt;  }
&lt;/div&gt;&lt;div class='line'&gt;}]&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;This means you don't have to dirty your controller with code that should be in your view.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>From Zero to Hero: How I built Twitious in Two Weeks</title>
    <link href="http://developwithstyle.com/articles/2010/10/28/from-zero-to-hero-how-i-built-twitious-in-two-weeks/"/>
    <updated>2010-10-28T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/10/28/from-zero-to-hero-how-i-built-twitious-in-two-weeks</id>
    <content type="html">&lt;p&gt;... and that wasn't even part time!&lt;/p&gt;

&lt;p&gt;I've been using &lt;a href=&quot;http://twitter.com/joelmoss&quot;&gt;Twitter&lt;/a&gt; for quite a while now, and I have quickly found that every time I come across a site or web page of interest - I will tweet it.  And quite often, I have found myself either forgetting to add these links to my bookmarks in Firefox, or just not bothering. But that's not good, as also quite often, I remember I tweeted a link that I need to refer back to, but just can't remember the damn thing.&lt;/p&gt;

&lt;p&gt;Twitter has become my primary means of bookmarking. But there is a problem with that - Twitter doesn't give me an easy way to see all those bookmarks. It is for that reason that I promptly set about building a web app that will make it easy for me to find all my tweeted links and organise them by hashtags.&lt;/p&gt;

&lt;p&gt;I came up with the idea of &lt;a href=&quot;http://twitious.com&quot;&gt;Twitious&lt;/a&gt; just two weeks ago, and it went live just three days ago, and now now has over 15,000 bookmarks! An achievement that I am extremely proud of. Don't get me wrong, it's not a complex app, but everything &lt;a href=&quot;http://twitious.com&quot;&gt;you see&lt;/a&gt; was created from scratch by myself - part time. I have a very busy full time freelance job remember. Not to mention &lt;a href=&quot;http://twitious.com&quot;&gt;Codaset&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The app was built with Rails 3 on Ruby 1.9.2. I originally had intended to use &lt;a href=&quot;http://mongodb.org&quot;&gt;MongoDB&lt;/a&gt; as the data backend, but settled with the tried and tested MySQL setup. Simply because I didn't actually see a reason not to. It's running on an Ubuntu slice at &lt;a href=&quot;http://slicehost.com&quot;&gt;Slicehost&lt;/a&gt;, under Nginx and Passenger 3. In fact, pretty much every part of the stack is the latest and greatest, which was really fun to do. (no legacy shit to deal with)&lt;/p&gt;

&lt;p&gt;Obviously, the app communicates with the Twitter API quite a lot, as every time a user signs up for Twitious, the app needs to scan through the users entire timeline, and parse out any links and hash tags. And it also needs to do that on a regular basis to ensure Twitious shows the latest links from each users tweets. I needed to run all this as background tasks via some sort of queueing system. This was a bit of a no-brainer too. I went with my trusted old friend; &lt;a http://github.com/defunkt/resque&gt;Resque&lt;/a&gt;, which I already use with Codaset.&lt;/p&gt;

&lt;p&gt;There is plenty more that I want to do with Twitious, but I think it's already a really efficient way to create and manage your bookmarks; especially if you are already using Twitter. So please feel free to check out &lt;a href=&quot;http://twitious.com&quot;&gt;Twitious&lt;/a&gt; and sign up. It's completely free, so why the hell not! And I would love to know what you think.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Dynamic Form and Dynamic Errors for Rails 3</title>
    <link href="http://developwithstyle.com/articles/2010/08/09/dynamic-form-and-dynamic-errors-for-rails-3/"/>
    <updated>2010-08-09T09:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/08/09/dynamic-form-and-dynamic-errors-for-rails-3</id>
    <content type="html">&lt;p&gt;Rails 3 is awesome! &lt;strong&gt;BUT&lt;/strong&gt;...&lt;/p&gt;

&lt;p&gt;For some unknown reason, the powers that be decided to remove the &lt;code&gt;error_message_on&lt;/code&gt; and &lt;code&gt;error_messages_for&lt;/code&gt; form helpers. I'm not sure about every one else, but I use these in pretty much every single form that I create, so I just have no idea why it was removed.&lt;/p&gt;

&lt;p&gt;Fortunately, all is not lost. The code for these helpers was extracted out into a plugin called &lt;a href=&quot;http://github.com/rails/dynamic_form&quot;&gt;dynamic_form&lt;/a&gt;. But unfortunately it doesn't seem to have been kept up to date, as the last commit was back on June 12th. Running the tests failed all over the place, simply because the HTML returned has changed slightly in the release candidate. So I took it upon myself to &lt;a href=&quot;http://codaset.com/joelmoss/dynamic-form/&quot;&gt;fork the code&lt;/a&gt; and managed to get the tests passing with Rails 3 RC. I then also packaged it up into a &lt;a href=&quot;http://rubygems.org/gems/dynamic_form&quot;&gt;Gem&lt;/a&gt; which you can &lt;a href=&quot;http://rubygems.org/gems/dynamic_form&quot;&gt;grab now and install&lt;/a&gt; in your Rails 3 app.&lt;/p&gt;

&lt;p&gt;My next task was to get the &lt;a href=&quot;http://github.com/jeremydurham/custom-err-msg/&quot;&gt;custom-err-msg&lt;/a&gt; plugin working with Rails 3. But rather than fix and refactor that as it is, I decided to simply integrate it into the &lt;a href=&quot;http://codaset.com/joelmoss/dynamic-form&quot;&gt;dynamic_form&lt;/a&gt; plugin, as it's functionality is closely related.&lt;/p&gt;

&lt;p&gt;So the &lt;a href=&quot;http://codaset.com/joelmoss/dynamic-form&quot;&gt;dynamic_form&lt;/a&gt; plugin has been enhanced a little, so please install and let me know what you think. I've put in a pull request to the official dynamic_form repo, so hopefully they will accept that soon. But in the meantime, you can still use my version by simply running &lt;code&gt;gem install dynamic_form&lt;/code&gt; or adding to your Gemfile (if you are using Bundler) &lt;code&gt;gem &quot;dynamic_form&quot;&lt;/code&gt;.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Handling Dates in MongoDB</title>
    <link href="http://developwithstyle.com/articles/2010/07/09/handling-dates-in-mongodb/"/>
    <updated>2010-07-09T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/07/09/handling-dates-in-mongodb</id>
    <content type="html">&lt;p&gt;I've been using &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; quite a bit recently in several different projects, and it kicks ass. But the hardest thing to learn and to get used to with Mongo, is it's schemaless structure. With SQL databases like MySQL, you always have a defined and very rigid structure, which is of course the schema for each table you create. You create a table with a few columns; each column has a set type, a length, and a whole host of other variables.&lt;/p&gt;




&lt;p&gt;It's this rigid structure that most of us have gotten used to for years, and that is the hardest thing to shake off when using NoSQL databases such as MongoDB.&lt;/p&gt;




&lt;p&gt;But that is not to say that Mongo has no defined structure. In fact, that is far from the truth. Mongo and all schemaless databases have defined structure, but the difference is that that structure is defined by you. And that is what makes Mongo so cool. No need to actually create any tables and define each column - Just insert some data in your own defined way.&lt;/p&gt;




&lt;p&gt;But there is a side effect of this schemaless idea. Even though you no longer have to define a schema in the traditional sense, you still have to think about the structure of each collection, and how that will look. In fact, there is a lot more to think about, as there are a lot more ways to structure your data with Mongo and other schemaless databases.&lt;/p&gt;




&lt;p&gt;It's somewhat of a steep learning curve, but well worth sticking with. I'm still leaning the best ways to structure certain data types, and dates is one that I think I've nailed.&lt;/p&gt;




&lt;!--more--&gt;




&lt;p&gt;Nearly all your collections will no doubt contain some sort of date or time stamp. While Mongo does have it's own native &lt;code&gt;Date()&lt;/code&gt; object, it's only really useful within the Mongo shell. I need to use it within PHP and Ruby and other languages. Up until recently, I've been saving &lt;code&gt;datetime&lt;/code&gt; as &quot;&lt;code&gt;2010-07-09 13:56:31&lt;/code&gt;&quot;. This works fine most of the time, but when you start needing to gather your data in more advanced ways, it starts to fall apart.&lt;/p&gt;




&lt;p&gt;For example, I'm currently using Mongo and the equally awesome &lt;a href=&quot;http://code.google.com/p/redis/&quot;&gt;Redis&lt;/a&gt; for logging data for &lt;a href=&quot;http://quicksearch.shermanstravel.com&quot;&gt;ShermansTravel.com&lt;/a&gt;. I needed to log a bunch of data each time a user clicks one of our paying ads. I ended up with collection records like this: (in PHP, as that is what this project calls for unfortunately)&lt;/p&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;
  {
    &quot;_id&quot; : ObjectId(&quot;4bfea7246c6151d127f80100&quot;),
    &quot;button_rank&quot; : &quot;5&quot;,
    &quot;category&quot; : &quot;flights&quot;,
    &quot;class&quot; : &quot;Economy&quot;,
    &quot;cpc&quot; : &quot;0.17&quot;,
    &quot;destination_place_id&quot; : &quot;197868&quot;,
    &quot;from_code&quot; : &quot;ORD&quot;,
    &quot;from_code_include_nearby&quot; : false,
    &quot;travelers&quot; : &quot;1&quot;,
    &quot;created&quot; : &quot;2010-03-29 20:15:34&quot;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;Notice the the &lt;code&gt;created&lt;/code&gt; timestamp on the last line there. Nothing special there, and I can find by the &lt;code&gt;created&lt;/code&gt; date without any issue at all. But I need to now count all clicks grouped by day, not time. This is where the above falls apart.&lt;/p&gt;




&lt;p&gt;This is what I tried:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;php &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$keys = new MongoCode('function(doc) { return { created: doc.created.split(&quot; &quot;)[0] }; }');
&lt;/div&gt;&lt;div class='line'&gt;  $reduce = new MongoCode('function(doc, prev) { prev.count++; }');
&lt;/div&gt;&lt;div class='line'&gt;  $clicks = $this-&gt;group($keys, array('count' =&gt; 0), $reduce);&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;Again, this works... almost! This week, the clicks collection ended up with 900,000 records, and using the above group query kept timing out. The problem is the second line where instead of simply specifying which key(s) to group by, I have to pass a PHP MongoCode object containing a Javascript function that creates and returns a custom key. In this case, I am simply grabbing the &lt;code&gt;created&lt;/code&gt; key of each record, and splitting the string, so I have the date and the time. I then return the date only, and can now group by date. This means that Mongo is iterating over every record and applying that function to each one, which obviously can take some time on larger collections, and completely ignores any indexes you may have created.&lt;/p&gt;




&lt;p&gt;So I quickly determined from this that I was storing the date and time in the wrong way. I need to split up the date and time. I now have this:&lt;/p&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;
  {
    &quot;_id&quot; : ObjectId(&quot;4bfea7246c6151d127f80100&quot;),
    &quot;button_rank&quot; : &quot;5&quot;,
    &quot;category&quot; : &quot;flights&quot;,
    &quot;class&quot; : &quot;Economy&quot;,
    &quot;cpc&quot; : &quot;0.17&quot;
    &quot;destination_place_id&quot; : &quot;197868&quot;,
    &quot;from_code&quot; : &quot;ORD&quot;,
    &quot;from_code_include_nearby&quot; : false,
    &quot;travelers&quot; : &quot;1&quot;,
    &quot;created&quot; : { &quot;d&quot; : &quot;2010-03-29&quot;, &quot;t&quot; : &quot;20:15:34&quot; }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;The last line still shows the &lt;code&gt;created&lt;/code&gt; date and time, but instead stores each in an embedded object or hash. This means that I can still find by &lt;code&gt;created&lt;/code&gt; date and time with just a little change, but more importantly, it means I can group much easier and much, much faster:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;php &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$key = array('created.d' =&gt; 1);
&lt;/div&gt;&lt;div class='line'&gt;  $reduce = new MongoCode('function(doc, prev) { prev.count++; }');
&lt;/div&gt;&lt;div class='line'&gt;  $clicks = $this-&gt;group($key, array('count' =&gt; 0), $reduce);&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;As you can from the second line in the above, I am no longer passing a function to build the key I want to group by - which was what was causing the problem. I now simply pass the key I want to group by: &lt;code&gt;created.d&lt;/code&gt;. The code is leaner and the query is loads faster, and my indexes are respected.&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Converting HTML Entities to Characters with Javascript</title>
    <link href="http://developwithstyle.com/articles/2010/06/29/converting-html-entities-to-characters/"/>
    <updated>2010-06-29T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/06/29/converting-html-entities-to-characters</id>
    <content type="html">&lt;p&gt;So I use Ajax quite a bit in many of my projects. And why not? It kicks ass! I have one project which dynamically updates specific elements of an HTML page via Ajax. Something like this:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$.get('/travel_guide/Paris', function(data){
&lt;/div&gt;&lt;div class='line'&gt;  $('#advice').text(data);
&lt;/div&gt;&lt;div class='line'&gt;});&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;The problem I have, is that sometimes that data can include HTML entities like &lt;code&gt;&amp;amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt;, and for reasons I don't want to bore you with, I cannot do anything about it on the server side. When inserting a block of text that contain HTML entities into the DOM, those entities are not parsed as such, and get printed exactly as they are.&lt;/p&gt;




&lt;!--more--&gt;




&lt;p&gt;What I need is a Javascript function that can take a string and parse it for any HTML entities, then replace each one with their HTML character. And this is what I came up with...&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;span class='line'&gt;16&lt;/span&gt;
&lt;span class='line'&gt;17&lt;/span&gt;
&lt;span class='line'&gt;18&lt;/span&gt;
&lt;span class='line'&gt;19&lt;/span&gt;
&lt;span class='line'&gt;20&lt;/span&gt;
&lt;span class='line'&gt;21&lt;/span&gt;
&lt;span class='line'&gt;22&lt;/span&gt;
&lt;span class='line'&gt;23&lt;/span&gt;
&lt;span class='line'&gt;24&lt;/span&gt;
&lt;span class='line'&gt;25&lt;/span&gt;
&lt;span class='line'&gt;26&lt;/span&gt;
&lt;span class='line'&gt;27&lt;/span&gt;
&lt;span class='line'&gt;28&lt;/span&gt;
&lt;span class='line'&gt;29&lt;/span&gt;
&lt;span class='line'&gt;30&lt;/span&gt;
&lt;span class='line'&gt;31&lt;/span&gt;
&lt;span class='line'&gt;32&lt;/span&gt;
&lt;span class='line'&gt;33&lt;/span&gt;
&lt;span class='line'&gt;34&lt;/span&gt;
&lt;span class='line'&gt;35&lt;/span&gt;
&lt;span class='line'&gt;36&lt;/span&gt;
&lt;span class='line'&gt;37&lt;/span&gt;
&lt;span class='line'&gt;38&lt;/span&gt;
&lt;span class='line'&gt;39&lt;/span&gt;
&lt;span class='line'&gt;40&lt;/span&gt;
&lt;span class='line'&gt;41&lt;/span&gt;
&lt;span class='line'&gt;42&lt;/span&gt;
&lt;span class='line'&gt;43&lt;/span&gt;
&lt;span class='line'&gt;44&lt;/span&gt;
&lt;span class='line'&gt;45&lt;/span&gt;
&lt;span class='line'&gt;46&lt;/span&gt;
&lt;span class='line'&gt;47&lt;/span&gt;
&lt;span class='line'&gt;48&lt;/span&gt;
&lt;span class='line'&gt;49&lt;/span&gt;
&lt;span class='line'&gt;50&lt;/span&gt;
&lt;span class='line'&gt;51&lt;/span&gt;
&lt;span class='line'&gt;52&lt;/span&gt;
&lt;span class='line'&gt;53&lt;/span&gt;
&lt;span class='line'&gt;54&lt;/span&gt;
&lt;span class='line'&gt;55&lt;/span&gt;
&lt;span class='line'&gt;56&lt;/span&gt;
&lt;span class='line'&gt;57&lt;/span&gt;
&lt;span class='line'&gt;58&lt;/span&gt;
&lt;span class='line'&gt;59&lt;/span&gt;
&lt;span class='line'&gt;60&lt;/span&gt;
&lt;span class='line'&gt;61&lt;/span&gt;
&lt;span class='line'&gt;62&lt;/span&gt;
&lt;span class='line'&gt;63&lt;/span&gt;
&lt;span class='line'&gt;64&lt;/span&gt;
&lt;span class='line'&gt;65&lt;/span&gt;
&lt;span class='line'&gt;66&lt;/span&gt;
&lt;span class='line'&gt;67&lt;/span&gt;
&lt;span class='line'&gt;68&lt;/span&gt;
&lt;span class='line'&gt;69&lt;/span&gt;
&lt;span class='line'&gt;70&lt;/span&gt;
&lt;span class='line'&gt;71&lt;/span&gt;
&lt;span class='line'&gt;72&lt;/span&gt;
&lt;span class='line'&gt;73&lt;/span&gt;
&lt;span class='line'&gt;74&lt;/span&gt;
&lt;span class='line'&gt;75&lt;/span&gt;
&lt;span class='line'&gt;76&lt;/span&gt;
&lt;span class='line'&gt;77&lt;/span&gt;
&lt;span class='line'&gt;78&lt;/span&gt;
&lt;span class='line'&gt;79&lt;/span&gt;
&lt;span class='line'&gt;80&lt;/span&gt;
&lt;span class='line'&gt;81&lt;/span&gt;
&lt;span class='line'&gt;82&lt;/span&gt;
&lt;span class='line'&gt;83&lt;/span&gt;
&lt;span class='line'&gt;84&lt;/span&gt;
&lt;span class='line'&gt;85&lt;/span&gt;
&lt;span class='line'&gt;86&lt;/span&gt;
&lt;span class='line'&gt;87&lt;/span&gt;
&lt;span class='line'&gt;88&lt;/span&gt;
&lt;span class='line'&gt;89&lt;/span&gt;
&lt;span class='line'&gt;90&lt;/span&gt;
&lt;span class='line'&gt;91&lt;/span&gt;
&lt;span class='line'&gt;92&lt;/span&gt;
&lt;span class='line'&gt;93&lt;/span&gt;
&lt;span class='line'&gt;94&lt;/span&gt;
&lt;span class='line'&gt;95&lt;/span&gt;
&lt;span class='line'&gt;96&lt;/span&gt;
&lt;span class='line'&gt;97&lt;/span&gt;
&lt;span class='line'&gt;98&lt;/span&gt;
&lt;span class='line'&gt;99&lt;/span&gt;
&lt;span class='line'&gt;100&lt;/span&gt;
&lt;span class='line'&gt;101&lt;/span&gt;
&lt;span class='line'&gt;102&lt;/span&gt;
&lt;span class='line'&gt;103&lt;/span&gt;
&lt;span class='line'&gt;104&lt;/span&gt;
&lt;span class='line'&gt;105&lt;/span&gt;
&lt;span class='line'&gt;106&lt;/span&gt;
&lt;span class='line'&gt;107&lt;/span&gt;
&lt;span class='line'&gt;108&lt;/span&gt;
&lt;span class='line'&gt;109&lt;/span&gt;
&lt;span class='line'&gt;110&lt;/span&gt;
&lt;span class='line'&gt;111&lt;/span&gt;
&lt;span class='line'&gt;112&lt;/span&gt;
&lt;span class='line'&gt;113&lt;/span&gt;
&lt;span class='line'&gt;114&lt;/span&gt;
&lt;span class='line'&gt;115&lt;/span&gt;
&lt;span class='line'&gt;116&lt;/span&gt;
&lt;span class='line'&gt;117&lt;/span&gt;
&lt;span class='line'&gt;118&lt;/span&gt;
&lt;span class='line'&gt;119&lt;/span&gt;
&lt;span class='line'&gt;120&lt;/span&gt;
&lt;span class='line'&gt;121&lt;/span&gt;
&lt;span class='line'&gt;122&lt;/span&gt;
&lt;span class='line'&gt;123&lt;/span&gt;
&lt;span class='line'&gt;124&lt;/span&gt;
&lt;span class='line'&gt;125&lt;/span&gt;
&lt;span class='line'&gt;126&lt;/span&gt;
&lt;span class='line'&gt;127&lt;/span&gt;
&lt;span class='line'&gt;128&lt;/span&gt;
&lt;span class='line'&gt;129&lt;/span&gt;
&lt;span class='line'&gt;130&lt;/span&gt;
&lt;span class='line'&gt;131&lt;/span&gt;
&lt;span class='line'&gt;132&lt;/span&gt;
&lt;span class='line'&gt;133&lt;/span&gt;
&lt;span class='line'&gt;134&lt;/span&gt;
&lt;span class='line'&gt;135&lt;/span&gt;
&lt;span class='line'&gt;136&lt;/span&gt;
&lt;span class='line'&gt;137&lt;/span&gt;
&lt;span class='line'&gt;138&lt;/span&gt;
&lt;span class='line'&gt;139&lt;/span&gt;
&lt;span class='line'&gt;140&lt;/span&gt;
&lt;span class='line'&gt;141&lt;/span&gt;
&lt;span class='line'&gt;142&lt;/span&gt;
&lt;span class='line'&gt;143&lt;/span&gt;
&lt;span class='line'&gt;144&lt;/span&gt;
&lt;span class='line'&gt;145&lt;/span&gt;
&lt;span class='line'&gt;146&lt;/span&gt;
&lt;span class='line'&gt;147&lt;/span&gt;
&lt;span class='line'&gt;148&lt;/span&gt;
&lt;span class='line'&gt;149&lt;/span&gt;
&lt;span class='line'&gt;150&lt;/span&gt;
&lt;span class='line'&gt;151&lt;/span&gt;
&lt;span class='line'&gt;152&lt;/span&gt;
&lt;span class='line'&gt;153&lt;/span&gt;
&lt;span class='line'&gt;154&lt;/span&gt;
&lt;span class='line'&gt;155&lt;/span&gt;
&lt;span class='line'&gt;156&lt;/span&gt;
&lt;span class='line'&gt;157&lt;/span&gt;
&lt;span class='line'&gt;158&lt;/span&gt;
&lt;span class='line'&gt;159&lt;/span&gt;
&lt;span class='line'&gt;160&lt;/span&gt;
&lt;span class='line'&gt;161&lt;/span&gt;
&lt;span class='line'&gt;162&lt;/span&gt;
&lt;span class='line'&gt;163&lt;/span&gt;
&lt;span class='line'&gt;164&lt;/span&gt;
&lt;span class='line'&gt;165&lt;/span&gt;
&lt;span class='line'&gt;166&lt;/span&gt;
&lt;span class='line'&gt;167&lt;/span&gt;
&lt;span class='line'&gt;168&lt;/span&gt;
&lt;span class='line'&gt;169&lt;/span&gt;
&lt;span class='line'&gt;170&lt;/span&gt;
&lt;span class='line'&gt;171&lt;/span&gt;
&lt;span class='line'&gt;172&lt;/span&gt;
&lt;span class='line'&gt;173&lt;/span&gt;
&lt;span class='line'&gt;174&lt;/span&gt;
&lt;span class='line'&gt;175&lt;/span&gt;
&lt;span class='line'&gt;176&lt;/span&gt;
&lt;span class='line'&gt;177&lt;/span&gt;
&lt;span class='line'&gt;178&lt;/span&gt;
&lt;span class='line'&gt;179&lt;/span&gt;
&lt;span class='line'&gt;180&lt;/span&gt;
&lt;span class='line'&gt;181&lt;/span&gt;
&lt;span class='line'&gt;182&lt;/span&gt;
&lt;span class='line'&gt;183&lt;/span&gt;
&lt;span class='line'&gt;184&lt;/span&gt;
&lt;span class='line'&gt;185&lt;/span&gt;
&lt;span class='line'&gt;186&lt;/span&gt;
&lt;span class='line'&gt;187&lt;/span&gt;
&lt;span class='line'&gt;188&lt;/span&gt;
&lt;span class='line'&gt;189&lt;/span&gt;
&lt;span class='line'&gt;190&lt;/span&gt;
&lt;span class='line'&gt;191&lt;/span&gt;
&lt;span class='line'&gt;192&lt;/span&gt;
&lt;span class='line'&gt;193&lt;/span&gt;
&lt;span class='line'&gt;194&lt;/span&gt;
&lt;span class='line'&gt;195&lt;/span&gt;
&lt;span class='line'&gt;196&lt;/span&gt;
&lt;span class='line'&gt;197&lt;/span&gt;
&lt;span class='line'&gt;198&lt;/span&gt;
&lt;span class='line'&gt;199&lt;/span&gt;
&lt;span class='line'&gt;200&lt;/span&gt;
&lt;span class='line'&gt;201&lt;/span&gt;
&lt;span class='line'&gt;202&lt;/span&gt;
&lt;span class='line'&gt;203&lt;/span&gt;
&lt;span class='line'&gt;204&lt;/span&gt;
&lt;span class='line'&gt;205&lt;/span&gt;
&lt;span class='line'&gt;206&lt;/span&gt;
&lt;span class='line'&gt;207&lt;/span&gt;
&lt;span class='line'&gt;208&lt;/span&gt;
&lt;span class='line'&gt;209&lt;/span&gt;
&lt;span class='line'&gt;210&lt;/span&gt;
&lt;span class='line'&gt;211&lt;/span&gt;
&lt;span class='line'&gt;212&lt;/span&gt;
&lt;span class='line'&gt;213&lt;/span&gt;
&lt;span class='line'&gt;214&lt;/span&gt;
&lt;span class='line'&gt;215&lt;/span&gt;
&lt;span class='line'&gt;216&lt;/span&gt;
&lt;span class='line'&gt;217&lt;/span&gt;
&lt;span class='line'&gt;218&lt;/span&gt;
&lt;span class='line'&gt;219&lt;/span&gt;
&lt;span class='line'&gt;220&lt;/span&gt;
&lt;span class='line'&gt;221&lt;/span&gt;
&lt;span class='line'&gt;222&lt;/span&gt;
&lt;span class='line'&gt;223&lt;/span&gt;
&lt;span class='line'&gt;224&lt;/span&gt;
&lt;span class='line'&gt;225&lt;/span&gt;
&lt;span class='line'&gt;226&lt;/span&gt;
&lt;span class='line'&gt;227&lt;/span&gt;
&lt;span class='line'&gt;228&lt;/span&gt;
&lt;span class='line'&gt;229&lt;/span&gt;
&lt;span class='line'&gt;230&lt;/span&gt;
&lt;span class='line'&gt;231&lt;/span&gt;
&lt;span class='line'&gt;232&lt;/span&gt;
&lt;span class='line'&gt;233&lt;/span&gt;
&lt;span class='line'&gt;234&lt;/span&gt;
&lt;span class='line'&gt;235&lt;/span&gt;
&lt;span class='line'&gt;236&lt;/span&gt;
&lt;span class='line'&gt;237&lt;/span&gt;
&lt;span class='line'&gt;238&lt;/span&gt;
&lt;span class='line'&gt;239&lt;/span&gt;
&lt;span class='line'&gt;240&lt;/span&gt;
&lt;span class='line'&gt;241&lt;/span&gt;
&lt;span class='line'&gt;242&lt;/span&gt;
&lt;span class='line'&gt;243&lt;/span&gt;
&lt;span class='line'&gt;244&lt;/span&gt;
&lt;span class='line'&gt;245&lt;/span&gt;
&lt;span class='line'&gt;246&lt;/span&gt;
&lt;span class='line'&gt;247&lt;/span&gt;
&lt;span class='line'&gt;248&lt;/span&gt;
&lt;span class='line'&gt;249&lt;/span&gt;
&lt;span class='line'&gt;250&lt;/span&gt;
&lt;span class='line'&gt;251&lt;/span&gt;
&lt;span class='line'&gt;252&lt;/span&gt;
&lt;span class='line'&gt;253&lt;/span&gt;
&lt;span class='line'&gt;254&lt;/span&gt;
&lt;span class='line'&gt;255&lt;/span&gt;
&lt;span class='line'&gt;256&lt;/span&gt;
&lt;span class='line'&gt;257&lt;/span&gt;
&lt;span class='line'&gt;258&lt;/span&gt;
&lt;span class='line'&gt;259&lt;/span&gt;
&lt;span class='line'&gt;260&lt;/span&gt;
&lt;span class='line'&gt;261&lt;/span&gt;
&lt;span class='line'&gt;262&lt;/span&gt;
&lt;span class='line'&gt;263&lt;/span&gt;
&lt;span class='line'&gt;264&lt;/span&gt;
&lt;span class='line'&gt;265&lt;/span&gt;
&lt;span class='line'&gt;266&lt;/span&gt;
&lt;span class='line'&gt;267&lt;/span&gt;
&lt;span class='line'&gt;268&lt;/span&gt;
&lt;span class='line'&gt;269&lt;/span&gt;
&lt;span class='line'&gt;270&lt;/span&gt;
&lt;span class='line'&gt;271&lt;/span&gt;
&lt;span class='line'&gt;272&lt;/span&gt;
&lt;span class='line'&gt;273&lt;/span&gt;
&lt;span class='line'&gt;274&lt;/span&gt;
&lt;span class='line'&gt;275&lt;/span&gt;
&lt;span class='line'&gt;276&lt;/span&gt;
&lt;span class='line'&gt;277&lt;/span&gt;
&lt;span class='line'&gt;278&lt;/span&gt;
&lt;span class='line'&gt;279&lt;/span&gt;
&lt;span class='line'&gt;280&lt;/span&gt;
&lt;span class='line'&gt;281&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;function entityToHtml(string) {
&lt;/div&gt;&lt;div class='line'&gt;    for (var i in entity_table) {
&lt;/div&gt;&lt;div class='line'&gt;        if (i != 38) {
&lt;/div&gt;&lt;div class='line'&gt;            string = string.replace(new RegExp(entity_table[i], &quot;g&quot;), String.fromCharCode(i));
&lt;/div&gt;&lt;div class='line'&gt;        }
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;    string = string.replace(new RegExp(&quot;&amp;#(x?)(\\d+);&quot;, &quot;g&quot;), String.fromCharCode(((p1 == 'x') ? parseInt(p2, 16) : p2)));
&lt;/div&gt;&lt;div class='line'&gt;    string = string.replace(new RegExp(entity_table[38], &quot;g&quot;), String.fromCharCode(38));
&lt;/div&gt;&lt;div class='line'&gt;    return string;
&lt;/div&gt;&lt;div class='line'&gt;}
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;var entity_table = {
&lt;/div&gt;&lt;div class='line'&gt;  //    34: &quot;&amp;quot;&quot;,       // Quotation mark. Not required
&lt;/div&gt;&lt;div class='line'&gt;  38: &quot;&amp;amp;&quot;,      // Ampersand. Applied before everything else in the application
&lt;/div&gt;&lt;div class='line'&gt;  60: &quot;&amp;lt;&quot;,       // Less-than sign
&lt;/div&gt;&lt;div class='line'&gt;  62: &quot;&amp;gt;&quot;,       // Greater-than sign
&lt;/div&gt;&lt;div class='line'&gt;  //    63: &quot;&amp;#63;&quot;,        // Question mark
&lt;/div&gt;&lt;div class='line'&gt;  //    111: &quot;&amp;#111;&quot;,      // Latin small letter o
&lt;/div&gt;&lt;div class='line'&gt;  160: &quot;&amp;nbsp;&quot;,        // Non-breaking space
&lt;/div&gt;&lt;div class='line'&gt;  161: &quot;&amp;iexcl;&quot;,       // Inverted exclamation mark
&lt;/div&gt;&lt;div class='line'&gt;  162: &quot;&amp;cent;&quot;,        // Cent sign
&lt;/div&gt;&lt;div class='line'&gt;  163: &quot;&amp;pound;&quot;,       // Pound sign
&lt;/div&gt;&lt;div class='line'&gt;  164: &quot;&amp;curren;&quot;,  // Currency sign
&lt;/div&gt;&lt;div class='line'&gt;  165: &quot;&amp;yen;&quot;,     // Yen sign
&lt;/div&gt;&lt;div class='line'&gt;  166: &quot;&amp;brvbar;&quot;,  // Broken vertical bar
&lt;/div&gt;&lt;div class='line'&gt;  167: &quot;&amp;sect;&quot;,        // Section sign
&lt;/div&gt;&lt;div class='line'&gt;  168: &quot;&amp;uml;&quot;,     // Diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  169: &quot;&amp;copy;&quot;,        // Copyright sign
&lt;/div&gt;&lt;div class='line'&gt;  170: &quot;&amp;ordf;&quot;,        // Feminine ordinal indicator
&lt;/div&gt;&lt;div class='line'&gt;  171: &quot;&amp;laquo;&quot;,       // Left-pointing double angle quotation mark
&lt;/div&gt;&lt;div class='line'&gt;  172: &quot;&amp;not;&quot;,     // Not sign
&lt;/div&gt;&lt;div class='line'&gt;  173: &quot;&amp;shy;&quot;,     // Soft hyphen
&lt;/div&gt;&lt;div class='line'&gt;  174: &quot;&amp;reg;&quot;,     // Registered sign
&lt;/div&gt;&lt;div class='line'&gt;  175: &quot;&amp;macr;&quot;,        // Macron
&lt;/div&gt;&lt;div class='line'&gt;  176: &quot;&amp;deg;&quot;,     // Degree sign
&lt;/div&gt;&lt;div class='line'&gt;  177: &quot;&amp;plusmn;&quot;,  // Plus-minus sign
&lt;/div&gt;&lt;div class='line'&gt;  178: &quot;&amp;sup2;&quot;,        // Superscript two
&lt;/div&gt;&lt;div class='line'&gt;  179: &quot;&amp;sup3;&quot;,        // Superscript three
&lt;/div&gt;&lt;div class='line'&gt;  180: &quot;&amp;acute;&quot;,       // Acute accent
&lt;/div&gt;&lt;div class='line'&gt;  181: &quot;&amp;micro;&quot;,       // Micro sign
&lt;/div&gt;&lt;div class='line'&gt;  182: &quot;&amp;para;&quot;,        // Pilcrow sign
&lt;/div&gt;&lt;div class='line'&gt;  183: &quot;&amp;middot;&quot;,  // Middle dot
&lt;/div&gt;&lt;div class='line'&gt;  184: &quot;&amp;cedil;&quot;,       // Cedilla
&lt;/div&gt;&lt;div class='line'&gt;  185: &quot;&amp;sup1;&quot;,        // Superscript one
&lt;/div&gt;&lt;div class='line'&gt;  186: &quot;&amp;ordm;&quot;,        // Masculine ordinal indicator
&lt;/div&gt;&lt;div class='line'&gt;  187: &quot;&amp;raquo;&quot;,       // Right-pointing double angle quotation mark
&lt;/div&gt;&lt;div class='line'&gt;  188: &quot;&amp;frac14;&quot;,  // Vulgar fraction one-quarter
&lt;/div&gt;&lt;div class='line'&gt;  189: &quot;&amp;frac12;&quot;,  // Vulgar fraction one-half
&lt;/div&gt;&lt;div class='line'&gt;  190: &quot;&amp;frac34;&quot;,  // Vulgar fraction three-quarters
&lt;/div&gt;&lt;div class='line'&gt;  191: &quot;&amp;iquest;&quot;,  // Inverted question mark
&lt;/div&gt;&lt;div class='line'&gt;  192: &quot;&amp;Agrave;&quot;,  // A with grave
&lt;/div&gt;&lt;div class='line'&gt;  193: &quot;&amp;Aacute;&quot;,  // A with acute
&lt;/div&gt;&lt;div class='line'&gt;  194: &quot;&amp;Acirc;&quot;,       // A with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  195: &quot;&amp;Atilde;&quot;,  // A with tilde
&lt;/div&gt;&lt;div class='line'&gt;  196: &quot;&amp;Auml;&quot;,        // A with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  197: &quot;&amp;Aring;&quot;,       // A with ring above
&lt;/div&gt;&lt;div class='line'&gt;  198: &quot;&amp;AElig;&quot;,       // AE
&lt;/div&gt;&lt;div class='line'&gt;  199: &quot;&amp;Ccedil;&quot;,  // C with cedilla
&lt;/div&gt;&lt;div class='line'&gt;  200: &quot;&amp;Egrave;&quot;,  // E with grave
&lt;/div&gt;&lt;div class='line'&gt;  201: &quot;&amp;Eacute;&quot;,  // E with acute
&lt;/div&gt;&lt;div class='line'&gt;  202: &quot;&amp;Ecirc;&quot;,       // E with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  203: &quot;&amp;Euml;&quot;,        // E with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  204: &quot;&amp;Igrave;&quot;,  // I with grave
&lt;/div&gt;&lt;div class='line'&gt;  205: &quot;&amp;Iacute;&quot;,  // I with acute
&lt;/div&gt;&lt;div class='line'&gt;  206: &quot;&amp;Icirc;&quot;,       // I with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  207: &quot;&amp;Iuml;&quot;,        // I with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  208: &quot;&amp;ETH;&quot;,     // Eth
&lt;/div&gt;&lt;div class='line'&gt;  209: &quot;&amp;Ntilde;&quot;,  // N with tilde
&lt;/div&gt;&lt;div class='line'&gt;  210: &quot;&amp;Ograve;&quot;,  // O with grave
&lt;/div&gt;&lt;div class='line'&gt;  211: &quot;&amp;Oacute;&quot;,  // O with acute
&lt;/div&gt;&lt;div class='line'&gt;  212: &quot;&amp;Ocirc;&quot;,       // O with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  213: &quot;&amp;Otilde;&quot;,  // O with tilde
&lt;/div&gt;&lt;div class='line'&gt;  214: &quot;&amp;Ouml;&quot;,        // O with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  215: &quot;&amp;times;&quot;,       // Multiplication sign
&lt;/div&gt;&lt;div class='line'&gt;  216: &quot;&amp;Oslash;&quot;,  // O with stroke
&lt;/div&gt;&lt;div class='line'&gt;  217: &quot;&amp;Ugrave;&quot;,  // U with grave
&lt;/div&gt;&lt;div class='line'&gt;  218: &quot;&amp;Uacute;&quot;,  // U with acute
&lt;/div&gt;&lt;div class='line'&gt;  219: &quot;&amp;Ucirc;&quot;,       // U with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  220: &quot;&amp;Uuml;&quot;,        // U with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  221: &quot;&amp;Yacute;&quot;,  // Y with acute
&lt;/div&gt;&lt;div class='line'&gt;  222: &quot;&amp;THORN;&quot;,       // Thorn
&lt;/div&gt;&lt;div class='line'&gt;  223: &quot;&amp;szlig;&quot;,       // Sharp s. Also known as ess-zed
&lt;/div&gt;&lt;div class='line'&gt;  224: &quot;&amp;agrave;&quot;,  // a with grave
&lt;/div&gt;&lt;div class='line'&gt;  225: &quot;&amp;aacute;&quot;,  // a with acute
&lt;/div&gt;&lt;div class='line'&gt;  226: &quot;&amp;acirc;&quot;,       // a with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  227: &quot;&amp;atilde;&quot;,  // a with tilde
&lt;/div&gt;&lt;div class='line'&gt;  228: &quot;&amp;auml;&quot;,        // a with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  229: &quot;&amp;aring;&quot;,       // a with ring above
&lt;/div&gt;&lt;div class='line'&gt;  230: &quot;&amp;aelig;&quot;,       // ae. Also known as ligature ae
&lt;/div&gt;&lt;div class='line'&gt;  231: &quot;&amp;ccedil;&quot;,  // c with cedilla
&lt;/div&gt;&lt;div class='line'&gt;  232: &quot;&amp;egrave;&quot;,  // e with grave
&lt;/div&gt;&lt;div class='line'&gt;  233: &quot;&amp;eacute;&quot;,  // e with acute
&lt;/div&gt;&lt;div class='line'&gt;  234: &quot;&amp;ecirc;&quot;,       // e with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  235: &quot;&amp;euml;&quot;,        // e with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  236: &quot;&amp;igrave;&quot;,  // i with grave
&lt;/div&gt;&lt;div class='line'&gt;  237: &quot;&amp;iacute;&quot;,  // i with acute
&lt;/div&gt;&lt;div class='line'&gt;  238: &quot;&amp;icirc;&quot;,       // i with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  239: &quot;&amp;iuml;&quot;,        // i with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  240: &quot;&amp;eth;&quot;,     // eth
&lt;/div&gt;&lt;div class='line'&gt;  241: &quot;&amp;ntilde;&quot;,  // n with tilde
&lt;/div&gt;&lt;div class='line'&gt;  242: &quot;&amp;ograve;&quot;,  // o with grave
&lt;/div&gt;&lt;div class='line'&gt;  243: &quot;&amp;oacute;&quot;,  // o with acute
&lt;/div&gt;&lt;div class='line'&gt;  244: &quot;&amp;ocirc;&quot;,       // o with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  245: &quot;&amp;otilde;&quot;,  // o with tilde
&lt;/div&gt;&lt;div class='line'&gt;  246: &quot;&amp;ouml;&quot;,        // o with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  247: &quot;&amp;divide;&quot;,  // Division sign
&lt;/div&gt;&lt;div class='line'&gt;  248: &quot;&amp;oslash;&quot;,  // o with stroke. Also known as o with slash
&lt;/div&gt;&lt;div class='line'&gt;  249: &quot;&amp;ugrave;&quot;,  // u with grave
&lt;/div&gt;&lt;div class='line'&gt;  250: &quot;&amp;uacute;&quot;,  // u with acute
&lt;/div&gt;&lt;div class='line'&gt;  251: &quot;&amp;ucirc;&quot;,       // u with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  252: &quot;&amp;uuml;&quot;,        // u with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  253: &quot;&amp;yacute;&quot;,  // y with acute
&lt;/div&gt;&lt;div class='line'&gt;  254: &quot;&amp;thorn;&quot;,       // thorn
&lt;/div&gt;&lt;div class='line'&gt;  255: &quot;&amp;yuml;&quot;,        // y with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  264: &quot;&amp;#264;&quot;,        // Latin capital letter C with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  265: &quot;&amp;#265;&quot;,        // Latin small letter c with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  338: &quot;&amp;OElig;&quot;,       // Latin capital ligature OE
&lt;/div&gt;&lt;div class='line'&gt;  339: &quot;&amp;oelig;&quot;,       // Latin small ligature oe
&lt;/div&gt;&lt;div class='line'&gt;  352: &quot;&amp;Scaron;&quot;,  // Latin capital letter S with caron
&lt;/div&gt;&lt;div class='line'&gt;  353: &quot;&amp;scaron;&quot;,  // Latin small letter s with caron
&lt;/div&gt;&lt;div class='line'&gt;  372: &quot;&amp;#372;&quot;,        // Latin capital letter W with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  373: &quot;&amp;#373;&quot;,        // Latin small letter w with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  374: &quot;&amp;#374;&quot;,        // Latin capital letter Y with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  375: &quot;&amp;#375;&quot;,        // Latin small letter y with circumflex
&lt;/div&gt;&lt;div class='line'&gt;  376: &quot;&amp;Yuml;&quot;,        // Latin capital letter Y with diaeresis
&lt;/div&gt;&lt;div class='line'&gt;  402: &quot;&amp;fnof;&quot;,        // Latin small f with hook, function, florin
&lt;/div&gt;&lt;div class='line'&gt;  710: &quot;&amp;circ;&quot;,        // Modifier letter circumflex accent
&lt;/div&gt;&lt;div class='line'&gt;  732: &quot;&amp;tilde;&quot;,       // Small tilde
&lt;/div&gt;&lt;div class='line'&gt;  913: &quot;&amp;Alpha;&quot;,       // Alpha
&lt;/div&gt;&lt;div class='line'&gt;  914: &quot;&amp;Beta;&quot;,        // Beta
&lt;/div&gt;&lt;div class='line'&gt;  915: &quot;&amp;Gamma;&quot;,       // Gamma
&lt;/div&gt;&lt;div class='line'&gt;  916: &quot;&amp;Delta;&quot;,       // Delta
&lt;/div&gt;&lt;div class='line'&gt;  917: &quot;&amp;Epsilon;&quot;, // Epsilon
&lt;/div&gt;&lt;div class='line'&gt;  918: &quot;&amp;Zeta;&quot;,        // Zeta
&lt;/div&gt;&lt;div class='line'&gt;  919: &quot;&amp;Eta;&quot;,     // Eta
&lt;/div&gt;&lt;div class='line'&gt;  920: &quot;&amp;Theta;&quot;,       // Theta
&lt;/div&gt;&lt;div class='line'&gt;  921: &quot;&amp;Iota;&quot;,        // Iota
&lt;/div&gt;&lt;div class='line'&gt;  922: &quot;&amp;Kappa;&quot;,       // Kappa
&lt;/div&gt;&lt;div class='line'&gt;  923: &quot;&amp;Lambda;&quot;,  // Lambda
&lt;/div&gt;&lt;div class='line'&gt;  924: &quot;&amp;Mu;&quot;,      // Mu
&lt;/div&gt;&lt;div class='line'&gt;  925: &quot;&amp;Nu;&quot;,      // Nu
&lt;/div&gt;&lt;div class='line'&gt;  926: &quot;&amp;Xi;&quot;,      // Xi
&lt;/div&gt;&lt;div class='line'&gt;  927: &quot;&amp;Omicron;&quot;, // Omicron
&lt;/div&gt;&lt;div class='line'&gt;  928: &quot;&amp;Pi;&quot;,      // Pi
&lt;/div&gt;&lt;div class='line'&gt;  929: &quot;&amp;Rho;&quot;,     // Rho
&lt;/div&gt;&lt;div class='line'&gt;  931: &quot;&amp;Sigma;&quot;,       // Sigma
&lt;/div&gt;&lt;div class='line'&gt;  932: &quot;&amp;Tau;&quot;,     // Tau
&lt;/div&gt;&lt;div class='line'&gt;  933: &quot;&amp;Upsilon;&quot;, // Upsilon
&lt;/div&gt;&lt;div class='line'&gt;  934: &quot;&amp;Phi;&quot;,     // Phi
&lt;/div&gt;&lt;div class='line'&gt;  935: &quot;&amp;Chi;&quot;,     // Chi
&lt;/div&gt;&lt;div class='line'&gt;  936: &quot;&amp;Psi;&quot;,     // Psi
&lt;/div&gt;&lt;div class='line'&gt;  937: &quot;&amp;Omega;&quot;,       // Omega
&lt;/div&gt;&lt;div class='line'&gt;  945: &quot;&amp;alpha;&quot;,       // alpha
&lt;/div&gt;&lt;div class='line'&gt;  946: &quot;&amp;beta;&quot;,        // beta
&lt;/div&gt;&lt;div class='line'&gt;  947: &quot;&amp;gamma;&quot;,       // gamma
&lt;/div&gt;&lt;div class='line'&gt;  948: &quot;&amp;delta;&quot;,       // delta
&lt;/div&gt;&lt;div class='line'&gt;  949: &quot;&amp;epsilon;&quot;, // epsilon
&lt;/div&gt;&lt;div class='line'&gt;  950: &quot;&amp;zeta;&quot;,        // zeta
&lt;/div&gt;&lt;div class='line'&gt;  951: &quot;&amp;eta;&quot;,     // eta
&lt;/div&gt;&lt;div class='line'&gt;  952: &quot;&amp;theta;&quot;,       // theta
&lt;/div&gt;&lt;div class='line'&gt;  953: &quot;&amp;iota;&quot;,        // iota
&lt;/div&gt;&lt;div class='line'&gt;  954: &quot;&amp;kappa;&quot;,       // kappa
&lt;/div&gt;&lt;div class='line'&gt;  955: &quot;&amp;lambda;&quot;,  // lambda
&lt;/div&gt;&lt;div class='line'&gt;  956: &quot;&amp;mu;&quot;,      // mu
&lt;/div&gt;&lt;div class='line'&gt;  957: &quot;&amp;nu;&quot;,      // nu
&lt;/div&gt;&lt;div class='line'&gt;  958: &quot;&amp;xi;&quot;,      // xi
&lt;/div&gt;&lt;div class='line'&gt;  959: &quot;&amp;omicron;&quot;, // omicron
&lt;/div&gt;&lt;div class='line'&gt;  960: &quot;&amp;pi;&quot;,      // pi
&lt;/div&gt;&lt;div class='line'&gt;  961: &quot;&amp;rho;&quot;,     // rho
&lt;/div&gt;&lt;div class='line'&gt;  962: &quot;&amp;sigmaf;&quot;,  // sigmaf
&lt;/div&gt;&lt;div class='line'&gt;  963: &quot;&amp;sigma;&quot;,       // sigma
&lt;/div&gt;&lt;div class='line'&gt;  964: &quot;&amp;tau;&quot;,     // tau
&lt;/div&gt;&lt;div class='line'&gt;  965: &quot;&amp;upsilon;&quot;, // upsilon
&lt;/div&gt;&lt;div class='line'&gt;  966: &quot;&amp;phi;&quot;,     // phi
&lt;/div&gt;&lt;div class='line'&gt;  967: &quot;&amp;chi;&quot;,     // chi
&lt;/div&gt;&lt;div class='line'&gt;  968: &quot;&amp;psi;&quot;,     // psi
&lt;/div&gt;&lt;div class='line'&gt;  969: &quot;&amp;omega;&quot;,       // omega
&lt;/div&gt;&lt;div class='line'&gt;  977: &quot;&amp;thetasym;&quot;,    // Theta symbol
&lt;/div&gt;&lt;div class='line'&gt;  978: &quot;&amp;upsih;&quot;,       // Greek upsilon with hook symbol
&lt;/div&gt;&lt;div class='line'&gt;  982: &quot;&amp;piv;&quot;,     // Pi symbol
&lt;/div&gt;&lt;div class='line'&gt;  8194: &quot;&amp;ensp;&quot;,       // En space
&lt;/div&gt;&lt;div class='line'&gt;  8195: &quot;&amp;emsp;&quot;,       // Em space
&lt;/div&gt;&lt;div class='line'&gt;  8201: &quot;&amp;thinsp;&quot;, // Thin space
&lt;/div&gt;&lt;div class='line'&gt;  8204: &quot;&amp;zwnj;&quot;,       // Zero width non-joiner
&lt;/div&gt;&lt;div class='line'&gt;  8205: &quot;&amp;zwj;&quot;,        // Zero width joiner
&lt;/div&gt;&lt;div class='line'&gt;  8206: &quot;&amp;lrm;&quot;,        // Left-to-right mark
&lt;/div&gt;&lt;div class='line'&gt;  8207: &quot;&amp;rlm;&quot;,        // Right-to-left mark
&lt;/div&gt;&lt;div class='line'&gt;  8211: &quot;&amp;ndash;&quot;,  // En dash
&lt;/div&gt;&lt;div class='line'&gt;  8212: &quot;&amp;mdash;&quot;,  // Em dash
&lt;/div&gt;&lt;div class='line'&gt;  8216: &quot;&amp;lsquo;&quot;,  // Left single quotation mark
&lt;/div&gt;&lt;div class='line'&gt;  8217: &quot;&amp;rsquo;&quot;,  // Right single quotation mark
&lt;/div&gt;&lt;div class='line'&gt;  8218: &quot;&amp;sbquo;&quot;,  // Single low-9 quotation mark
&lt;/div&gt;&lt;div class='line'&gt;  8220: &quot;&amp;ldquo;&quot;,  // Left double quotation mark
&lt;/div&gt;&lt;div class='line'&gt;  8221: &quot;&amp;rdquo;&quot;,  // Right double quotation mark
&lt;/div&gt;&lt;div class='line'&gt;  8222: &quot;&amp;bdquo;&quot;,  // Double low-9 quotation mark
&lt;/div&gt;&lt;div class='line'&gt;  8224: &quot;&amp;dagger;&quot;, // Dagger
&lt;/div&gt;&lt;div class='line'&gt;  8225: &quot;&amp;Dagger;&quot;, // Double dagger
&lt;/div&gt;&lt;div class='line'&gt;  8226: &quot;&amp;bull;&quot;,       // Bullet
&lt;/div&gt;&lt;div class='line'&gt;  8230: &quot;&amp;hellip;&quot;, // Horizontal ellipsis
&lt;/div&gt;&lt;div class='line'&gt;  8240: &quot;&amp;permil;&quot;, // Per mille sign
&lt;/div&gt;&lt;div class='line'&gt;  8242: &quot;&amp;prime;&quot;,  // Prime
&lt;/div&gt;&lt;div class='line'&gt;  8243: &quot;&amp;Prime;&quot;,  // Double Prime
&lt;/div&gt;&lt;div class='line'&gt;  8249: &quot;&amp;lsaquo;&quot;, // Single left-pointing angle quotation
&lt;/div&gt;&lt;div class='line'&gt;  8250: &quot;&amp;rsaquo;&quot;, // Single right-pointing angle quotation
&lt;/div&gt;&lt;div class='line'&gt;  8254: &quot;&amp;oline;&quot;,  // Overline
&lt;/div&gt;&lt;div class='line'&gt;  8260: &quot;&amp;frasl;&quot;,  // Fraction Slash
&lt;/div&gt;&lt;div class='line'&gt;  8364: &quot;&amp;euro;&quot;,       // Euro sign
&lt;/div&gt;&lt;div class='line'&gt;  8472: &quot;&amp;weierp;&quot;, // Script capital
&lt;/div&gt;&lt;div class='line'&gt;  8465: &quot;&amp;image;&quot;,  // Blackletter capital I
&lt;/div&gt;&lt;div class='line'&gt;  8476: &quot;&amp;real;&quot;,       // Blackletter capital R
&lt;/div&gt;&lt;div class='line'&gt;  8482: &quot;&amp;trade;&quot;,  // Trade mark sign
&lt;/div&gt;&lt;div class='line'&gt;  8501: &quot;&amp;alefsym;&quot;,    // Alef symbol
&lt;/div&gt;&lt;div class='line'&gt;  8592: &quot;&amp;larr;&quot;,       // Leftward arrow
&lt;/div&gt;&lt;div class='line'&gt;  8593: &quot;&amp;uarr;&quot;,       // Upward arrow
&lt;/div&gt;&lt;div class='line'&gt;  8594: &quot;&amp;rarr;&quot;,       // Rightward arrow
&lt;/div&gt;&lt;div class='line'&gt;  8595: &quot;&amp;darr;&quot;,       // Downward arrow
&lt;/div&gt;&lt;div class='line'&gt;  8596: &quot;&amp;harr;&quot;,       // Left right arrow
&lt;/div&gt;&lt;div class='line'&gt;  8629: &quot;&amp;crarr;&quot;,  // Downward arrow with corner leftward. Also known as carriage return
&lt;/div&gt;&lt;div class='line'&gt;  8656: &quot;&amp;lArr;&quot;,       // Leftward double arrow. ISO 10646 does not say that lArr is the same as the 'is implied by' arrow but also does not have any other character for that function. So ? lArr can be used for 'is implied by' as ISOtech suggests
&lt;/div&gt;&lt;div class='line'&gt;  8657: &quot;&amp;uArr;&quot;,       // Upward double arrow
&lt;/div&gt;&lt;div class='line'&gt;  8658: &quot;&amp;rArr;&quot;,       // Rightward double arrow. ISO 10646 does not say this is the 'implies' character but does not have another character with this function so ? rArr can be used for 'implies' as ISOtech suggests
&lt;/div&gt;&lt;div class='line'&gt;  8659: &quot;&amp;dArr;&quot;,       // Downward double arrow
&lt;/div&gt;&lt;div class='line'&gt;  8660: &quot;&amp;hArr;&quot;,       // Left-right double arrow
&lt;/div&gt;&lt;div class='line'&gt;  // Mathematical Operators
&lt;/div&gt;&lt;div class='line'&gt;  8704: &quot;&amp;forall;&quot;, // For all
&lt;/div&gt;&lt;div class='line'&gt;  8706: &quot;&amp;part;&quot;,       // Partial differential
&lt;/div&gt;&lt;div class='line'&gt;  8707: &quot;&amp;exist;&quot;,  // There exists
&lt;/div&gt;&lt;div class='line'&gt;  8709: &quot;&amp;empty;&quot;,  // Empty set. Also known as null set and diameter
&lt;/div&gt;&lt;div class='line'&gt;  8711: &quot;&amp;nabla;&quot;,  // Nabla. Also known as backward difference
&lt;/div&gt;&lt;div class='line'&gt;  8712: &quot;&amp;isin;&quot;,       // Element of
&lt;/div&gt;&lt;div class='line'&gt;  8713: &quot;&amp;notin;&quot;,  // Not an element of
&lt;/div&gt;&lt;div class='line'&gt;  8715: &quot;&amp;ni;&quot;,     // Contains as member
&lt;/div&gt;&lt;div class='line'&gt;  8719: &quot;&amp;prod;&quot;,       // N-ary product. Also known as product sign. Prod is not the same character as U+03A0 'greek capital letter pi' though the same glyph might be used for both
&lt;/div&gt;&lt;div class='line'&gt;  8721: &quot;&amp;sum;&quot;,        // N-ary summation. Sum is not the same character as U+03A3 'greek capital letter sigma' though the same glyph might be used for both
&lt;/div&gt;&lt;div class='line'&gt;  8722: &quot;&amp;minus;&quot;,  // Minus sign
&lt;/div&gt;&lt;div class='line'&gt;  8727: &quot;&amp;lowast;&quot;, // Asterisk operator
&lt;/div&gt;&lt;div class='line'&gt;  8729: &quot;&amp;#8729;&quot;,  // Bullet operator
&lt;/div&gt;&lt;div class='line'&gt;  8730: &quot;&amp;radic;&quot;,  // Square root. Also known as radical sign
&lt;/div&gt;&lt;div class='line'&gt;  8733: &quot;&amp;prop;&quot;,       // Proportional to
&lt;/div&gt;&lt;div class='line'&gt;  8734: &quot;&amp;infin;&quot;,  // Infinity
&lt;/div&gt;&lt;div class='line'&gt;  8736: &quot;&amp;ang;&quot;,        // Angle
&lt;/div&gt;&lt;div class='line'&gt;  8743: &quot;&amp;and;&quot;,        // Logical and. Also known as wedge
&lt;/div&gt;&lt;div class='line'&gt;  8744: &quot;&amp;or;&quot;,     // Logical or. Also known as vee
&lt;/div&gt;&lt;div class='line'&gt;  8745: &quot;&amp;cap;&quot;,        // Intersection. Also known as cap
&lt;/div&gt;&lt;div class='line'&gt;  8746: &quot;&amp;cup;&quot;,        // Union. Also known as cup
&lt;/div&gt;&lt;div class='line'&gt;  8747: &quot;&amp;int;&quot;,        // Integral
&lt;/div&gt;&lt;div class='line'&gt;  8756: &quot;&amp;there4;&quot;, // Therefore
&lt;/div&gt;&lt;div class='line'&gt;  8764: &quot;&amp;sim;&quot;,        // tilde operator. Also known as varies with and similar to. The tilde operator is not the same character as the tilde, U+007E, although the same glyph might be used to represent both
&lt;/div&gt;&lt;div class='line'&gt;  8773: &quot;&amp;cong;&quot;,       // Approximately equal to
&lt;/div&gt;&lt;div class='line'&gt;  8776: &quot;&amp;asymp;&quot;,  // Almost equal to. Also known as asymptotic to
&lt;/div&gt;&lt;div class='line'&gt;  8800: &quot;&amp;ne;&quot;,     // Not equal to
&lt;/div&gt;&lt;div class='line'&gt;  8801: &quot;&amp;equiv;&quot;,  // Identical to
&lt;/div&gt;&lt;div class='line'&gt;  8804: &quot;&amp;le;&quot;,     // Less-than or equal to
&lt;/div&gt;&lt;div class='line'&gt;  8805: &quot;&amp;ge;&quot;,     // Greater-than or equal to
&lt;/div&gt;&lt;div class='line'&gt;  8834: &quot;&amp;sub;&quot;,        // Subset of
&lt;/div&gt;&lt;div class='line'&gt;  8835: &quot;&amp;sup;&quot;,        // Superset of. Note that nsup, 'not a superset of, U+2283' is not covered by the Symbol font encoding and is not included.
&lt;/div&gt;&lt;div class='line'&gt;  8836: &quot;&amp;nsub;&quot;,       // Not a subset of
&lt;/div&gt;&lt;div class='line'&gt;  8838: &quot;&amp;sube;&quot;,       // Subset of or equal to
&lt;/div&gt;&lt;div class='line'&gt;  8839: &quot;&amp;supe;&quot;,       // Superset of or equal to
&lt;/div&gt;&lt;div class='line'&gt;  8853: &quot;&amp;oplus;&quot;,  // Circled plus. Also known as direct sum
&lt;/div&gt;&lt;div class='line'&gt;  8855: &quot;&amp;otimes;&quot;, // Circled times. Also known as vector product
&lt;/div&gt;&lt;div class='line'&gt;  8869: &quot;&amp;perp;&quot;,       // Up tack. Also known as orthogonal to and perpendicular
&lt;/div&gt;&lt;div class='line'&gt;  8901: &quot;&amp;sdot;&quot;,       // Dot operator. The dot operator is not the same character as U+00B7 middle dot
&lt;/div&gt;&lt;div class='line'&gt;  // Miscellaneous Technical
&lt;/div&gt;&lt;div class='line'&gt;  8968: &quot;&amp;lceil;&quot;,  // Left ceiling. Also known as an APL upstile
&lt;/div&gt;&lt;div class='line'&gt;  8969: &quot;&amp;rceil;&quot;,  // Right ceiling
&lt;/div&gt;&lt;div class='line'&gt;  8970: &quot;&amp;lfloor;&quot;, // left floor. Also known as APL downstile
&lt;/div&gt;&lt;div class='line'&gt;  8971: &quot;&amp;rfloor;&quot;, // Right floor
&lt;/div&gt;&lt;div class='line'&gt;  9001: &quot;&amp;lang;&quot;,       // Left-pointing angle bracket. Also known as bra. Lang is not the same character as U+003C 'less than'or U+2039 'single left-pointing angle quotation mark'
&lt;/div&gt;&lt;div class='line'&gt;  9002: &quot;&amp;rang;&quot;,       // Right-pointing angle bracket. Also known as ket. Rang is not the same character as U+003E 'greater than' or U+203A 'single right-pointing angle quotation mark'
&lt;/div&gt;&lt;div class='line'&gt;  // Geometric Shapes
&lt;/div&gt;&lt;div class='line'&gt;  9642: &quot;&amp;#9642;&quot;,  // Black small square
&lt;/div&gt;&lt;div class='line'&gt;  9643: &quot;&amp;#9643;&quot;,  // White small square
&lt;/div&gt;&lt;div class='line'&gt;  9674: &quot;&amp;loz;&quot;,        // Lozenge
&lt;/div&gt;&lt;div class='line'&gt;  // Miscellaneous Symbols
&lt;/div&gt;&lt;div class='line'&gt;  9702: &quot;&amp;#9702;&quot;,  // White bullet
&lt;/div&gt;&lt;div class='line'&gt;  9824: &quot;&amp;spades;&quot;, // Black (filled) spade suit
&lt;/div&gt;&lt;div class='line'&gt;  9827: &quot;&amp;clubs;&quot;,  // Black (filled) club suit. Also known as shamrock
&lt;/div&gt;&lt;div class='line'&gt;  9829: &quot;&amp;hearts;&quot;, // Black (filled) heart suit. Also known as shamrock
&lt;/div&gt;&lt;div class='line'&gt;  9830: &quot;&amp;diams;&quot;   // Black (filled) diamond suit
&lt;/div&gt;&lt;div class='line'&gt;}&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;Unfortunately, there is no way to convert these entities without a big long list to look through. But it works nicely like so:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;entityToHtml(string_with_entities);&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;Making my code now looking like this:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$.get('/travel_guide/Paris', function(data){
&lt;/div&gt;&lt;div class='line'&gt;  $('#advice').text(entityToHtml(data));
&lt;/div&gt;&lt;div class='line'&gt;});&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <title>jQuery UI Autocomplete and Caching Query Results</title>
    <link href="http://developwithstyle.com/articles/2010/05/14/jquery-ui-autocomplete-is-it-any-good/"/>
    <updated>2010-05-14T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/05/14/jquery-ui-autocomplete-is-it-any-good</id>
    <content type="html">&lt;p&gt;I've never managed to find a really good jQuery based autocomplete plugins, especially one that is flexible and easily extensible. So when the jQuery UI team &lt;a href=&quot;http://blog.jqueryui.com/2010/03/jquery-ui-18/&quot;&gt;released 1.8&lt;/a&gt; back in March, I was intrigued to find that they included - amongst other new widgets - an &lt;a href=&quot;http://jqueryui.com/demos/autocomplete/&quot;&gt;autocomplete widget&lt;/a&gt;. And it turns out to be pretty damn good, and flexible to boot.&lt;/p&gt;




&lt;p&gt;So when I had a need to add the ability for a local data source for the autocomplete plugin that we use on &lt;a href=&quot;http://quicksearch.shermanstravel.com&quot;&gt;ShermansTravel QuickSearch&lt;/a&gt;, I gave the new jQuery UI widget a go.&lt;/p&gt;




&lt;!--more--&gt;




&lt;p&gt;The jQuery UI Autocomplete widget can load in data in three ways... (examples taken straight from the jQuery UI docs)&lt;/p&gt;




&lt;h5&gt;In an array with local data:&lt;/h5&gt;


&lt;p&gt;Pass it an array with a list of strings, and it will use present a list of matching values based on your entered string.&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$(function() {
&lt;/div&gt;&lt;div class='line'&gt;    $(&quot;#tags&quot;).autocomplete({
&lt;/div&gt;&lt;div class='line'&gt;        source: [&quot;php&quot;, &quot;javascript&quot;, &quot;asp&quot;, &quot;ruby&quot;, &quot;python&quot;, &quot;c&quot;, &quot;scala&quot;, &quot;groovy&quot;, &quot;haskell&quot;, &quot;perl&quot;]
&lt;/div&gt;&lt;div class='line'&gt;    });
&lt;/div&gt;&lt;div class='line'&gt;});&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;h5&gt;A string, specifying a URL to get the data:&lt;/h5&gt;


&lt;p&gt;Pass it a string of a relative URL, and it will make an ajax call to that URL, passing it the users entered string.&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$(function() {
&lt;/div&gt;&lt;div class='line'&gt;    $(&quot;#birds&quot;).autocomplete({
&lt;/div&gt;&lt;div class='line'&gt;        source: &quot;search.php&quot;,
&lt;/div&gt;&lt;div class='line'&gt;        minLength: 3
&lt;/div&gt;&lt;div class='line'&gt;    });
&lt;/div&gt;&lt;div class='line'&gt;});&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;h5&gt;Via a callback (function):&lt;/h5&gt;


&lt;p&gt;Pass it a callback and you can do pretty much anything you want. This example uses such a technique and caches the query results.&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;span class='line'&gt;16&lt;/span&gt;
&lt;span class='line'&gt;17&lt;/span&gt;
&lt;span class='line'&gt;18&lt;/span&gt;
&lt;span class='line'&gt;19&lt;/span&gt;
&lt;span class='line'&gt;20&lt;/span&gt;
&lt;span class='line'&gt;21&lt;/span&gt;
&lt;span class='line'&gt;22&lt;/span&gt;
&lt;span class='line'&gt;23&lt;/span&gt;
&lt;span class='line'&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;var cache = {};
&lt;/div&gt;&lt;div class='line'&gt;$(&quot;#birds&quot;).autocomplete({
&lt;/div&gt;&lt;div class='line'&gt;    source: function(request, response) {
&lt;/div&gt;&lt;div class='line'&gt;        if (cache.term == request.term &amp;&amp; cache.content) {
&lt;/div&gt;&lt;div class='line'&gt;            response(cache.content);
&lt;/div&gt;&lt;div class='line'&gt;            return;
&lt;/div&gt;&lt;div class='line'&gt;        }
&lt;/div&gt;&lt;div class='line'&gt;        if (new RegExp(cache.term).test(request.term) &amp;&amp; cache.content &amp;&amp; cache.content.length &amp;lt; 13) {
&lt;/div&gt;&lt;div class='line'&gt;            response($.ui.autocomplete.filter(cache.content, request.term));
&lt;/div&gt;&lt;div class='line'&gt;            return;
&lt;/div&gt;&lt;div class='line'&gt;        }
&lt;/div&gt;&lt;div class='line'&gt;        $.ajax({
&lt;/div&gt;&lt;div class='line'&gt;            url: &quot;search.php&quot;,
&lt;/div&gt;&lt;div class='line'&gt;            dataType: &quot;json&quot;,
&lt;/div&gt;&lt;div class='line'&gt;            data: request,
&lt;/div&gt;&lt;div class='line'&gt;            success: function(data) {
&lt;/div&gt;&lt;div class='line'&gt;                cache.term = request.term;
&lt;/div&gt;&lt;div class='line'&gt;                cache.content = data;
&lt;/div&gt;&lt;div class='line'&gt;                response(data);
&lt;/div&gt;&lt;div class='line'&gt;            }
&lt;/div&gt;&lt;div class='line'&gt;        });
&lt;/div&gt;&lt;div class='line'&gt;    },
&lt;/div&gt;&lt;div class='line'&gt;    minLength: 2
&lt;/div&gt;&lt;div class='line'&gt;});&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;h4&gt;A Caching Autocomplete for Remote Data&lt;/h4&gt;




&lt;p&gt;What I really needed was a way to cache every single query when loading data in via an ajax call. The Autocomplete widget does not cache your returned query data at all, which means that an ajax call is made on every single key press. Even if you set the &lt;code&gt;minLength&lt;/code&gt; to something like &lt;code&gt;3&lt;/code&gt; - which will only trigger the autocomplete once the user has entered at least 3 characters - every character entered after that will trigger an ajax call.&lt;/p&gt;




&lt;p&gt;So I came up with a somewhat simple, but effective caching strategy using the callback method for loading data.&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;span class='line'&gt;16&lt;/span&gt;
&lt;span class='line'&gt;17&lt;/span&gt;
&lt;span class='line'&gt;18&lt;/span&gt;
&lt;span class='line'&gt;19&lt;/span&gt;
&lt;span class='line'&gt;20&lt;/span&gt;
&lt;span class='line'&gt;21&lt;/span&gt;
&lt;span class='line'&gt;22&lt;/span&gt;
&lt;span class='line'&gt;23&lt;/span&gt;
&lt;span class='line'&gt;24&lt;/span&gt;
&lt;span class='line'&gt;25&lt;/span&gt;
&lt;span class='line'&gt;26&lt;/span&gt;
&lt;span class='line'&gt;27&lt;/span&gt;
&lt;span class='line'&gt;28&lt;/span&gt;
&lt;span class='line'&gt;29&lt;/span&gt;
&lt;span class='line'&gt;30&lt;/span&gt;
&lt;span class='line'&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;var cache = {};
&lt;/div&gt;&lt;div class='line'&gt;$(&quot;#birds&quot;).autocomplete({
&lt;/div&gt;&lt;div class='line'&gt;    source: function(request, response) {
&lt;/div&gt;&lt;div class='line'&gt;      var term          = request.term.toLowerCase(),
&lt;/div&gt;&lt;div class='line'&gt;          element       = this.element,
&lt;/div&gt;&lt;div class='line'&gt;          cache         = this.element.data('autocompleteCache') || {},
&lt;/div&gt;&lt;div class='line'&gt;          foundInCache  = false;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;      $.each(cache, function(key, data){
&lt;/div&gt;&lt;div class='line'&gt;        if (term.indexOf(key) === 0 &amp;&amp; data.length &gt; 0) {
&lt;/div&gt;&lt;div class='line'&gt;          response(data);
&lt;/div&gt;&lt;div class='line'&gt;          foundInCache = true;
&lt;/div&gt;&lt;div class='line'&gt;          return;
&lt;/div&gt;&lt;div class='line'&gt;        }
&lt;/div&gt;&lt;div class='line'&gt;      });
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;        if (foundInCache) return;
&lt;/div&gt;&lt;div class='line'&gt;        
&lt;/div&gt;&lt;div class='line'&gt;        $.ajax({
&lt;/div&gt;&lt;div class='line'&gt;            url: 'search.php',
&lt;/div&gt;&lt;div class='line'&gt;            dataType: &quot;json&quot;,
&lt;/div&gt;&lt;div class='line'&gt;            data: request,
&lt;/div&gt;&lt;div class='line'&gt;            success: function(data) {
&lt;/div&gt;&lt;div class='line'&gt;                cache[term] = data;
&lt;/div&gt;&lt;div class='line'&gt;                element.data('autocompleteCache', cache);
&lt;/div&gt;&lt;div class='line'&gt;                response(data);
&lt;/div&gt;&lt;div class='line'&gt;            }
&lt;/div&gt;&lt;div class='line'&gt;        });
&lt;/div&gt;&lt;div class='line'&gt;    },
&lt;/div&gt;&lt;div class='line'&gt;    minLength: 2
&lt;/div&gt;&lt;div class='line'&gt;});&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;Here we are saving the cache as a hash in the corresponding element using jQuery's data function. And we are doing this for every query performed. We first loop through each element of the cache, and check if any of the keys begin with the current search term. If we find something, then we call the passed &lt;code&gt;response&lt;/code&gt; callback function, and return from the &lt;code&gt;each&lt;/code&gt; loop.&lt;/p&gt;




&lt;p&gt;If no cache is found for the current term, then we call the ajax as usual. But if we do find a matching key in the cache, then we don't call the ajax, and instead return the cached data.&lt;/p&gt;




&lt;p&gt;Simple, but works nicely.&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Trigger Javascript Events after Binding with jQuery</title>
    <link href="http://developwithstyle.com/articles/2010/05/10/trigger-javascript-events-after-binding-with-jquery/"/>
    <updated>2010-05-10T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/05/10/trigger-javascript-events-after-binding-with-jquery</id>
    <content type="html">&lt;p&gt;I use jQuery - a lot! In fact, I wonder how I ever lived my developer life without it. And even though I've used for a good few years now, I am still learning. Not just it's API, but simple things like best practises. Here is a simple tip, that I seem to have overlooked in the past.&lt;/p&gt;




&lt;!--more--&gt;




&lt;p&gt;When binding an event on an element; for example if I want to trigger some sort of action when the user makes a change to a select element in a form, I would use this piece of code:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$(function(){
&lt;/div&gt;&lt;div class='line'&gt;    $('#mySelect').change(function(){
&lt;/div&gt;&lt;div class='line'&gt;      // do something here that is really cool, and it will occur
&lt;/div&gt;&lt;div class='line'&gt;      // each time a user changes the value of 'myLink' which is a
&lt;/div&gt;&lt;div class='line'&gt;      // select form element
&lt;/div&gt;&lt;div class='line'&gt;    });
&lt;/div&gt;&lt;div class='line'&gt;  });&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;But sometimes, I also need to trigger that change event on page load. As the user may be editing the data in the form, and I need to be sure that what the user sees on the page reflects the form value of the select element.&lt;/p&gt;




&lt;p&gt;Previously, I did this:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$(function(){
&lt;/div&gt;&lt;div class='line'&gt;    function mySelectFunction(){
&lt;/div&gt;&lt;div class='line'&gt;      // do something here that is really cool, and it will occur
&lt;/div&gt;&lt;div class='line'&gt;      // each time a user changes the value of 'myLink' which is a
&lt;/div&gt;&lt;div class='line'&gt;      // select form element
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;    
&lt;/div&gt;&lt;div class='line'&gt;    $('#mySelect').change(mySelectFunction);
&lt;/div&gt;&lt;div class='line'&gt;    
&lt;/div&gt;&lt;div class='line'&gt;    mySelectFunction();
&lt;/div&gt;&lt;div class='line'&gt;  });&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;So I define a function that performs the action that should take place when user changes the select element, then I pass that function to the jQuery &lt;code&gt;change&lt;/code&gt; event. But then I also call the function on it's own, so that it is called on page load.&lt;/p&gt;




&lt;p&gt;Yes I know!! It's pretty damn obvious, and to be honest a pretty big oversight on my part. What I should have been doing from the start, and what I now do all the time, is this:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;javascript &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;$(function(){
&lt;/div&gt;&lt;div class='line'&gt;    $('#mySelect').change(function(){
&lt;/div&gt;&lt;div class='line'&gt;      // do something here that is really cool, and it will occur
&lt;/div&gt;&lt;div class='line'&gt;      // each time a user changes the value of 'myLink' which is a
&lt;/div&gt;&lt;div class='line'&gt;      // select form element
&lt;/div&gt;&lt;div class='line'&gt;    }).change();
&lt;/div&gt;&lt;div class='line'&gt;  });&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;See what I did there? I simply added a few characters; &lt;code&gt;.change()&lt;/code&gt; to the jQuery chain. But that extra call to the &lt;code&gt;change()&lt;/code&gt; event, will trigger the event that I bound earlier in the chain.&lt;/p&gt;




&lt;p&gt;So all I am doing is binding the event to my desired action, then triggering it. Luurrvely!&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Tail your Logs with a Touch of Color</title>
    <link href="http://developwithstyle.com/articles/2010/04/20/tail-your-logs-with-a-touch-of-color/"/>
    <updated>2010-04-20T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/04/20/tail-your-logs-with-a-touch-of-color</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://eric.lubow.org&quot;&gt;Eric Lubow&lt;/a&gt; (@elubow), a colleague of mine just released his first &lt;a href=&quot;http://eric.lubow.org/2010/ruby/colortail-gem/&quot;&gt;Ruby Gem&lt;/a&gt; and published it on &lt;a href=&quot;http://codaset.com/elubow/colortail&quot;&gt;Codaset&lt;/a&gt;, and I gotta say, it's a pretty damn useful one too.&lt;/p&gt;




&lt;p&gt;ColorTail - or ColourTail if you want the correct english spelling - is a very easy way to give your log files a touch of color when you tail them. Tailing logs can be very useful, but can also be very confusing, and sometimes a touch mind blowing with all the data that some logs can spew out at you. So adding a bit of color, or underlining certain lines, or even flashing them would really help you identify the important bits of your log.&lt;/p&gt;




&lt;p&gt;Just install ColorTail:&lt;/p&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
  &lt;span class=&quot;x&quot;&gt;# sudo gem install colortail&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;Then create a file in your home directory called &lt;code&gt;.colortailrc&lt;/code&gt;, and define your colortail config:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;Groupings = {
&lt;/div&gt;&lt;div class='line'&gt;  # This default matching scheme
&lt;/div&gt;&lt;div class='line'&gt;  'default' =&gt; [
&lt;/div&gt;&lt;div class='line'&gt;      { :match =&gt; /Completed in/,    :color =&gt; :red,     :attribute =&gt; :reverse },
&lt;/div&gt;&lt;div class='line'&gt;      { :match =&gt; /EMERGENCY/,    :color =&gt; :red,     :attribute =&gt; :reverse },
&lt;/div&gt;&lt;div class='line'&gt;      { :match =&gt; /FATAL/,        :color =&gt; :red,     :attribute =&gt; :bright },
&lt;/div&gt;&lt;div class='line'&gt;      { :match =&gt; /CRITICAL/,     :color =&gt; :red },
&lt;/div&gt;&lt;div class='line'&gt;      { :match =&gt; /DEBUG/,        :color =&gt; :green },
&lt;/div&gt;&lt;div class='line'&gt;      { :match =&gt; /ERROR/,        :color =&gt; :green },
&lt;/div&gt;&lt;div class='line'&gt;      { :match =&gt; /INFO/,         :color =&gt; :none },
&lt;/div&gt;&lt;div class='line'&gt;      { :match =&gt; /WARN/,         :color =&gt; :yellow }
&lt;/div&gt;&lt;div class='line'&gt;  ]
&lt;/div&gt;&lt;div class='line'&gt;}&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;The above is the default, so will apply to all logs whenever you tail them with the colortail command, like so:&lt;/p&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
  &lt;span class=&quot;x&quot;&gt;# colortail -g log/development.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;Which will give you this:&lt;/p&gt;




&lt;p&gt;&lt;img src=&quot;http://developwithstyle.com/img/posts/colored_log_example.jpg&quot; width=&quot;590&quot; /&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href=&quot;http://codaset.com/elubow/colortail&quot;&gt;Check out the project&lt;/a&gt;, and enjoy!&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Introducing [Baby] Mario: Content Management Made Easy</title>
    <link href="http://developwithstyle.com/articles/2010/04/19/introducing-baby-mario-content-management-made-easy/"/>
    <updated>2010-04-19T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/04/19/introducing-baby-mario-content-management-made-easy</id>
    <content type="html">&lt;p&gt;So I started a new client project a week or so ago. They needed a content management system. So I had a look around at what was already available, and to be honest there are some good and there are some bad. But as usual, none really made me happy, and provided me with a CMS that did one thing well: manage content!&lt;/p&gt;

&lt;p&gt;So I built my own of course! I would like to introduce you to &lt;a href=&quot;http://codaset.com/joelmoss/mario&quot;&gt;[Baby] Mario&lt;/a&gt;; a Rails based content management system that lets you manage content, and then gets out of your way.&lt;/p&gt;

&lt;p&gt;Mario stores all its content and data in the database, so no need for creating and editing hundreds of files. And that means your entire site can be managed anytime, anywhere.&lt;/p&gt;

&lt;p&gt;It support layouts, pages and nested pages. Just create a page with or without a layout, then make it a child of any one of your other pages. It lets you write full HTML, but also provides a simple templating system provided by &lt;a href=&quot;http://mustache.github.com/&quot;&gt;Mustache&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Your stylesheets and javascript are also stored in the database, so no more file editing. And you can upload your images and other downloadable assets quickly and easily. Mario uses &lt;a href=&quot;http://github.com/jnicklas/carrierwave&quot;&gt;CarrierWave&lt;/a&gt;, so has support for storing your images on your server, on S3, MongoDB and others.&lt;/p&gt;

&lt;p&gt;Caching is provided [and enabled by default in production] for all pages, stylesheets and javascript assets.&lt;/p&gt;

&lt;p&gt;Mario is very young right now, hence the [Baby] prefix, so please be gentle. But that also means that his future lays in your hands, as well as mine. I have plenty more requirements for the current client, that I will be adding to Mario, so Mario will be growing up quite a bit over the next few weeks. I welcome any contributions and thoughts about what direction his future should take. So please &lt;a href=&quot;http://codaset.com/joelmoss/mario&quot;&gt;fork the project&lt;/a&gt; and hack away.&lt;/p&gt;

&lt;p&gt;Enjoy, and let me know what you think.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Taking this Blog to a better Place.</title>
    <link href="http://developwithstyle.com/articles/2010/04/11/taking-this-blog-to-a-better-place/"/>
    <updated>2010-04-11T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/04/11/taking-this-blog-to-a-better-place</id>
    <content type="html">&lt;p&gt;So...&lt;/p&gt;

&lt;p&gt;Hold on a second. Why is it I always start a post with a &quot;So&quot;? I also seem to start my emails and tweets with the word. I think it may have something to do with the way I think. I tend to think of my blog posts, emails and tweets, as an extension or continuation of my thoughts. Which I suppose is no bad thing. But anyway, I digress.&lt;/p&gt;

&lt;p&gt;So... (he, he!) Since I started the &lt;a href=&quot;http://codaset.blip.tv&quot;&gt;Codaset video podcast&lt;/a&gt; - which I managed to produce two full episodes of before it stalled a little (Episode 3 is still not done, and I released episode 2 a good 2-3 weeks ago) - I've been thinking about other ways to talk about all the great things that I am constantly discovering on the net. I then started to wonder if there was a blog all about web development, that contained articles about coding, design and tools for web developers. There are plenty of language specific blogs out there, but I have not managed to find a good quality blog that specialises in this one subject, with regular quality articles. Perhaps something akin to TechCrunch (but better) for web developers only. A &quot;DevCrunch&quot; of sorts.&lt;/p&gt;

&lt;p&gt;Unless I am mistaken, this sounds like a small gap in the market. So over the next few weeks, I am going to attempt to use this blog as somewhat of a test for this idea. I want to try and write at least one blog post every other day on anything related to web development.&lt;/p&gt;

&lt;p&gt;This is quite a big task for me, as I am not the worlds best blogger (as you can tell from the frequency of posts right here), but I think I can do it. I have a large list of links to some great little nuggets of information that I have been saving to talk about in the Codaset video podcast, and the list is growing. So I will be starting with those, and adding to them when I come across anything of interest.&lt;/p&gt;

&lt;p&gt;If I can manage this and churn out these regular posts, and you guys like them, then I have other ideas to enhance the thoughts behind this post. I already tweeted about an idea to create some sort of &lt;a href=&quot;http://twitter.com/joelmoss/status/11893716277&quot;&gt;crowd sourced web development blog&lt;/a&gt;, and I really like the idea. Got a bit more to think about how it would work, and how it would be different to sites such as Reddit or Digg, but I like it already, and I think it would be a great way to encourage outside contributions.&lt;/p&gt;

&lt;p&gt;So... Onwards and upwards!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Easily Manage your Local Hosts with Ghost</title>
    <link href="http://developwithstyle.com/articles/2010/03/26/easily-manage-your-local-hosts-with-ghost/"/>
    <updated>2010-03-26T00:00:00+00:00</updated>
    <id>http://developwithstyle.com/articles/2010/03/26/easily-manage-your-local-hosts-with-ghost</id>
    <content type="html">&lt;p&gt;I don't know about you, but I'm forever editing my local hosts file, when developing apps and sites. Hopefully, you already know that you can create your own custom, virtual domains, that can point to any IP address.&lt;/p&gt;

&lt;p&gt;So for example, I've started building a new site and want to be able to access my local copy of the site via a domain, rather than local IP or via &lt;code&gt;localhost&lt;/code&gt;. So all I gotta do is open up the &lt;a href=&quot;http://macromates.com/&quot;&gt;one true text editor&lt;/a&gt; and edit my &lt;code&gt;/etc/hosts&lt;/code&gt; file. The location of this file will vary depending on your OS, but on a Mac, &lt;code&gt;/etc/hosts&lt;/code&gt; is where you will find it.&lt;/p&gt;

&lt;p&gt;The contents of the file should look something like this:&lt;/p&gt;

&lt;code&gt;&lt;pre&gt;
    ##
    # Host Database
    #
    # localhost is used to configure the loopback interface
    # when the system is booting.  Do not change this entry.
    ##
    127.0.0.1	localhost
    255.255.255.255	broadcasthost
    ::1             localhost 
    fe80::1%lo0	localhost
&lt;/pre&gt;&lt;/code&gt;

Usually I would add a new line at the bottom of this file, with my domain and the IP I want to point it to:

&lt;code&gt;&lt;pre&gt;
    127.0.0.1 myfunkydomain.dev
&lt;/pre&gt;&lt;/code&gt;

&lt;p&gt;The domain can be absolutely anything you want, as long as it is a valid domain format. I usually end mine with &lt;code&gt;.dev&lt;/code&gt;, so I know I use for development.&lt;/p&gt;

&lt;h4&gt;Enter the Ghost!&lt;/h4&gt;

&lt;p&gt;I found an even easier and funkier way to add and edit my local hosts. &lt;a href=&quot;http://codaset.com/joelmoss/ghost&quot;&gt;Ghost&lt;/a&gt; is a Ruby gem (of course) that makes it really quick and easy to add, edit, list and remove local host names. To add a new domain, just run this from your command line:&lt;/p&gt;

&lt;code&gt;&lt;pre&gt;
    $ ghost add mynewfunkydevsite.dev
    =&gt;  [Adding] mynewfunkydevsite.dev -&gt; 127.0.0.1
&lt;/pre&gt;&lt;/code&gt;

&lt;p&gt;And the domain &lt;code&gt;mynewfunkydevsite.dev&lt;/code&gt; is instantly ready and waiting to serve your needs. By default it will point to your local IP: &lt;code&gt;127.0.0.1&lt;/code&gt;, but if you want to point it to a different IP, just add it on the end:&lt;/p&gt;

&lt;code&gt;&lt;pre&gt;
    $ ghost add mynewfunkydevsite.dev 123.123.123.123
    =&gt;  [Adding] mynewfunkydevsite.dev -&gt; 123.123.123.123
&lt;/pre&gt;&lt;/code&gt;

&lt;p&gt;Here are the other commands:&lt;/p&gt;

&lt;code&gt;&lt;pre&gt;
    $ ghost list
    Listing 2 host(s):
      mydevsite.local      -&gt; 127.0.0.1
      staging-server.local -&gt; 67.207.136.164

    $ ghost delete mydevsite.local
      [Deleting] mydevsite.local

    $ ghost delete_matching test
      [Deleting] test2.local
      [Deleting] test.local

    $ ghost list
    Listing 1 host(s):
      staging-server.local -&gt; 67.207.136.164

    $ ghost modify staging-server.local 64.233.167.99
      [Modifying] staging-server.local -&gt; 64.233.167.99

    $ ghost list
    Listing 1 host(s):
      staging-server.local -&gt; 64.233.167.99

    $ ghost export &gt; some_file

    $ ghost empty
      [Emptying] Done.

    $ ghost list
    Listing 0 host(s):

    $ ghost import some_file
      [Adding] staging-server.local -&gt; 64.233.167.99

    $ ghost list
    Listing 1 host(s):
      staging-server.local -&gt; 64.233.167.99
&lt;/pre&gt;&lt;/code&gt;

&lt;p&gt;Give it a go. Your [developer] life depends on it!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>I finally did it! My own Web Development Podcast</title>
    <link href="http://developwithstyle.com/articles/2010/03/19/i-finally-did-it-My-own-web-development-podcast/"/>
    <updated>2010-03-19T00:00:00+00:00</updated>
    <id>http://developwithstyle.com/articles/2010/03/19/i-finally-did-it-My-own-web-development-podcast</id>
    <content type="html">&lt;p&gt;I've been threatening to start producing some sort of podcast for ages now. Well I've only gone and bloody done it!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://codaset.com/blog&quot;&gt;Codaset Video Podcast&lt;/a&gt; has already reached episode 2, and I'me getting great feedback from it. Each week, I will be talking about anything that takes my fancy really, but mostly the topics will be web development and design related.&lt;/p&gt;

&lt;p&gt;The first two episodes talk about a few cool jQuery plugins; show of a very cool Ambilight effect video with HTML5; talk about CoffeeScript, and loads of other stuff. The style of the videos are meant to be a little rough at the edges, and I never do more than one take for each one, and perform no editing or cuts. Of course that may change if I see the need, but I want to keep it raw and untamed.&lt;/p&gt;

&lt;p&gt;The best place to find the Video Podcasts are on the &lt;a href=&quot;http://codaset.com/blog&quot;&gt;Codaset blog&lt;/a&gt;, but I also publish them on &lt;a href=&quot;http://codaset.blip.tv&quot;&gt;Blip.TV&lt;/a&gt; which offers a few subscription options. And of course you can subscribe to the podcast on &lt;a href=&quot;http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=361456135 &quot;&gt;iTunes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get you started, here is episode 2. Enjoy, and I welcome your thoughts, comments and feedback.&lt;/p&gt;

&lt;embed src=&quot;http://blip.tv/play/ha5Agc3dfAI%2Em4v&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;580&quot; height=&quot;340&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;</content>
  </entry>
  
  <entry>
    <title>Follow your Passion Trail, not the Money Trail</title>
    <link href="http://developwithstyle.com/articles/2010/02/17/follow-your-passion-trail-not-the-money-trail/"/>
    <updated>2010-02-17T00:00:00+00:00</updated>
    <id>http://developwithstyle.com/articles/2010/02/17/follow-your-passion-trail-not-the-money-trail</id>
    <content type="html">&lt;p&gt;My brother-in-law, Adam popped round earlier today, and we got talking about work and business. I used to run a successful web hosting business with him a few years back, and we have always talked about business and work. While I've always been a hands-on kind of guy, Adam can be quite the opposite. However, we still both enjoy and love the thrill of running a business.&lt;/p&gt;

&lt;p&gt;These days, I'm doing quite well as a freelance web developer, and building up Codaset into my next full time business. Adam is now a qualified financial advisor, and also doing well. We're both good at what we do.&lt;/p&gt;

&lt;p&gt;However, Adam is getting a little bored and frustrated with working for someone else. He wants to run a business; any business. It doesn't matter what it is. The point is, he enjoys the process and task or running a business, no matter what it is.&lt;/p&gt;

&lt;p&gt;So I tried to help him get fired up about finding a new business idea, and the best way to start it, all while still maintaining his day job. I suggested he borrow a book that I had just read, which I felt would really help him. &quot;&lt;a href=&quot;http://crushitbook.com/&quot;&gt;Crush It&lt;/a&gt;&quot; by WineLibraryTV's &lt;a href=&quot;http://garyvaynerchuk.com/&quot;&gt;Gary Vaynerchuck&lt;/a&gt; is a great little book, and really cemented a few ideas that I already had in my head. Adam took the book, but he left the conversation still in a different mindset, and thinking that he needed to start a business by buying a franchise or some other existing company.&lt;/p&gt;

&lt;p&gt;Of course, he could very well do that, but I see two big things wrong with that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;He needs a large amount of cash up front&lt;/li&gt;
  &lt;li&gt;There is a higher amount of risk involved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I then realised why he was looking at this way of starting a business. It's because his primary goal is to make money. He wants to run a successful business because a successful business makes money. But that is the completely wrong way to go about running a business.&lt;/p&gt;

&lt;h4&gt;I have a passion!&lt;/h4&gt;
&lt;p&gt;I love the internet. I love developing web apps for the internet, and I love the endless possibilities that it gives me, with very little overheads or costs involved. The internet allows anyone who has a passion, to build that passion into an enjoyable business. It just so happens, that my passion is the internet.&lt;/p&gt;

&lt;p&gt;We all have a passion. Some of you will already know what that passion is, and some of you may not have yet found your passion. Regardless of who you are, you have something that you enjoy doing, and that enjoyment can very easily turn into a passion.&lt;/p&gt;

&lt;h4&gt;Ok, so what am I getting at here?&lt;/h4&gt;
&lt;p&gt;Anything that you are passionate about will end up being something of quality. You will spend endless hours, and very, very late nights (and early mornings) being passionate about your passion. And you will do it well.&lt;/p&gt;

&lt;p&gt;My point is, that when you run a business, it should be all about your passion, and not about the money. You should be doing it because you enjoy doing it regardless of how much money you make, if at all. My bet, is that if you truly love what you are doing, you will try you hardest to make sure that it is bloody good, and of the highest quality. And that is what makes a good business.&lt;/p&gt;

&lt;h4&gt;So follow your passion trail, and NOT the money trail. If you do, your passion will turn into money.&lt;/h4&gt;</content>
  </entry>
  
  <entry>
    <title>Exact Matching with Sphinx</title>
    <link href="http://developwithstyle.com/articles/2010/02/10/exact-matching-with-sphinx/"/>
    <updated>2010-02-10T00:00:00+00:00</updated>
    <id>http://developwithstyle.com/articles/2010/02/10/exact-matching-with-sphinx</id>
    <content type="html">&lt;p&gt;
  So I've been working with &lt;a href=&quot;http://sphinxsearch.com&quot;&gt;Sphinx&lt;/a&gt; a lot over the last few months for several different projects, including &lt;a href=&quot;http://codaset.com&quot;&gt;Codaset&lt;/a&gt;. It's an amazing piece of software, and solves the myriad of problems when trying to implement any kind of full text or intensive searches.
&lt;/p&gt;




&lt;p&gt;
  But, it's still not had a final release yet, as we are at 0.9.9. Which means that there may be some things missing or incomplete from the API. One thing I was missing was a way to find or add weight to exact matches. I can do phrase matching by enclosing the search string in quotes. But that returns all docs which include any or all of that phrase, which is fine, as I want to see all of them. But what I want to do is make sure that the exact matches are listed first, or are given increased weighting. And right now, that is not the case.
&lt;/p&gt;




&lt;p&gt;
  So I had a think, and came up with the idea of including a new &lt;code&gt;SELECT&lt;/code&gt; item in my Sphinx index. So we have something like this:
&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;sql &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;SELECT CONCAT('__START__ ', my_field, ' __END__') AS exact_matched_field FROM table;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;
  And now I can run the following Sphinx search, which will match my full and exact search string:
&lt;/p&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
  &lt;span class=&quot;x&quot;&gt;@exact_matched_field &quot;__START__ my value __END__&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <title>Reaching the Limits of Speed</title>
    <link href="http://developwithstyle.com/articles/2010/01/19/reaching-the-limits-of-speed/"/>
    <updated>2010-01-19T00:00:00+00:00</updated>
    <id>http://developwithstyle.com/articles/2010/01/19/reaching-the-limits-of-speed</id>
    <content type="html">&lt;p&gt;I'm sure most of you have already heard of Node.js, and have probably been blown away by what it can do, and it's possibilities. But do you really know how fast it can be?&lt;/p&gt;

&lt;blockquote&gt;&lt;pre&gt;
# node.js on freenode
spoob: technoweenie; seriously, you should look up how fast nodejs is... :)
technoweenie: yea i was getting about 5k r/s, pretty impressive
spoob: you should be getting around 20k r/s?
technoweenie: really?
technoweenie: oh wait i only ran 5k requests
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;pre&gt;
# twitter
technoweenie: sample node.js server is *extremely* slow, am i missing something? i'm just trying the example app on nodejs.org  
technoweenie: oh i see, the demo app sets a 2s timeout, haha  
lifo: classic
technoweenie: hey that's a great way to start off a new web framework, simulate rails cgi speeds
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;I am sure &lt;a href=&quot;http://techno-weenie.net/2010/1/15/node-js-for-my-tiny-ruby-brain&quot;&gt;Technoweenie&lt;/a&gt; wouldn't mind me posting this, but I think it's hilarious.&lt;/p&gt;

&lt;p&gt;I'm out! ;)&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Goodbye Wordpress, Hello Jekyll</title>
    <link href="http://developwithstyle.com/articles/2009/12/09/goodbye-wordpress-hello-jekyll/"/>
    <updated>2009-12-09T00:00:00+00:00</updated>
    <id>http://developwithstyle.com/articles/2009/12/09/goodbye-wordpress-hello-jekyll</id>
    <content type="html">&lt;p&gt;A few months ago, I ditched my install of Wordpress and rebuilt this blog from the ground up using nothing but good old, raw HTML, with a little sprinkling of magic. At the time, I didn't really talk about it much, so in this post I will be talking about how my blog is built, maintained and published using that little sprinkling of magic that is called Jekyll and Codaset Pages.&lt;/p&gt;

&lt;h3&gt;Goodbye Wordpress&lt;/h3&gt;

&lt;p&gt;Now don't get me wrong here, but Wordpress is great at what it does. It's probably the best blog engine available, and the fact that it has a huge community around it, makes it somewhat of a rock star in the open source community. But... what it tries to do is everything! It tries to answer all your blogging conundrums, which unfortunately actually places some restrictions on what you can or cannot do with your blog. Yes I can install a plugin, or even write one myself, but have you ever written a Wordpress plugin? Don't! &lt;/p&gt;

&lt;p&gt;What I am trying to say, is that blogging with Wordpress or any other automated blogging engine is not fun anymore. I know the point of a blogging engine is to allow you to publish without the need to write code, but you know what? I like writing code! I like having full control over what my blog does and what it looks like. And that is why I ditched Wordpress.&lt;/p&gt;

&lt;h3&gt;Hello Jekyll&lt;/h3&gt;

&lt;p&gt;What I didn't want to do was to write my own blogging engine. In fact, I don't want to use a blogging engine at all, at least not in the traditional sense. I just want a simple, unrestricted method of blogging. So I turned to &lt;a href=&quot;http://tom.preston-werner.com/jekyll/&quot;&gt;Jekyll&lt;/a&gt;. Jekyll is a blog aware, static site generator written in Ruby, and in use by &lt;a href=&quot;http://codaset.com&quot;&gt;Codaset&lt;/a&gt; and &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt; for their pages feature. It lets you write raw HTML, or your template language of choice (Textile, Markdown), and even lets you create layouts. It then takes these templates and layouts and spits out a complete website or blog in a completely static form.&lt;/p&gt;

&lt;h3&gt;And Hello Codaset Pages&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://pages.codaset.com&quot;&gt;Codaset Pages&lt;/a&gt; are a brilliantly simple way to host any static content, and works perfectly with Jekyll. Just create a new project under your Codaset account, then every time you 'git push' to it, your site or blog is instantly updated. So I have a project called '&lt;a href=&quot;http://codaset.com/joelmoss/joelmoss_pages&quot;&gt;joelmoss_pages&lt;/a&gt;', which can be seen at &lt;a href=&quot;http://joelmoss.codaset.com&quot;&gt;http://joelmoss.codaset.com&lt;/a&gt;. And that is this very blog.&lt;/p&gt;

&lt;p&gt;You can see exactly how my blog is structured and have access to all the source code at &lt;a href=&quot;http://codaset.com/joelmoss/joelmoss_pages&quot;&gt;Codaset&lt;/a&gt;, so I won't go into too much detail. Just look at the &lt;a href=&quot;http://codaset.com/joelmoss/joelmoss_pages&quot;&gt;source&lt;/a&gt; yourself. But what I will quickly do is show you how I wrote this blog post.&lt;/p&gt;

&lt;p&gt;You can find the actual source file for this blog post &lt;a href=&quot;http://codaset.com/joelmoss/joelmoss_pages/source/master/blob/articles/_posts/2009-12-09-goodbye-wordpress-hello-jekyll.html&quot;&gt;right here&lt;/a&gt;. Nothing special right? Wrong! The top four lines contain what we call 'YAML front matter', and they tell Jekyll which layout to use and the pages title. You can find the &lt;a href=&quot;http://codaset.com/joelmoss/joelmoss_pages/source/master/blob/_layouts/post.html&quot;&gt;layout here&lt;/a&gt; and can see on line 66 where we include this blog post file.&lt;/p&gt;

&lt;p&gt;Now I just load up my command line and cd to my 'joelmoss_pages' working directory, and then 'git push'. Codaset will then run Jekyll against my new blog post when I push it to the server. Which means that my blog post is published almost as soon as I push to my Git repository. There's just something so bloody wicked about that!&lt;/p&gt;

&lt;p&gt;And that, my friends is it! I have full control over what my blog post looks like, as I can edit the html directly and with very little effort. And I can very easily create any other pages of content just as quickly. I don't have to mess about with the restrictions of a blog engine such as Wordpress, and there are no version upgrades to mess around with. I also don't have to look at the messiest, spaghettiest codebase in the open source community, every time I want to add some sort of plugin.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Quick and easy emailing in Ruby with Pony</title>
    <link href="http://developwithstyle.com/articles/2009/12/01/quick-and-easy-emailing-in-ruby-with-pony/"/>
    <updated>2009-12-01T00:00:00+00:00</updated>
    <id>http://developwithstyle.com/articles/2009/12/01/quick-and-easy-emailing-in-ruby-with-pony</id>
    <content type="html">&lt;p&gt;I needed to send an email to all the users of Codaset, and wanted a quick and easy way to do so. So I just wrote a quick Rake task that will loop through all the users in the Codaset database, and send each one an email. However, when I was looking at how to send the emails, there didn't seem to be an easy way to do so without having to write several lines of code just to send one email. What I needed was something similar to &lt;a href=&quot;http://www.php.net/manual/en/function.mail.php&quot;&gt;PHP's mail() function&lt;/a&gt; which lets me send an email with one line of code:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;php &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;mail('you@example.com', 'My Subject', $message);&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;I don't need to use an SMTP server to send it, as it works just fine with sendmail.&lt;/p&gt;




&lt;p&gt;Unfortunately, Ruby and Rails built in mail classes don't offer such simplicity, which is very rare. But then I found &lt;a href=&quot;http://github.com/benprew/pony&quot;&gt;Pony&lt;/a&gt;, which is a Ruby gem that mimics PHP's mail function. Now I can can send an email in Ruby with one short line of code, and no configuration needed:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;Pony.mail(:to =&gt; 'you@example.com', :from =&gt; 'me@example.com', :subject =&gt; 'hi', :body =&gt; 'Hello there.')&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;Easy peasy!&lt;/p&gt;




&lt;p&gt;For those of you who are interested, here is my rake task in its entirety:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;span class='line'&gt;16&lt;/span&gt;
&lt;span class='line'&gt;17&lt;/span&gt;
&lt;span class='line'&gt;18&lt;/span&gt;
&lt;span class='line'&gt;19&lt;/span&gt;
&lt;span class='line'&gt;20&lt;/span&gt;
&lt;span class='line'&gt;21&lt;/span&gt;
&lt;span class='line'&gt;22&lt;/span&gt;
&lt;span class='line'&gt;23&lt;/span&gt;
&lt;span class='line'&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;require &quot;pony&quot;
&lt;/div&gt;&lt;div class='line'&gt;require &quot;erb&quot;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;desc &quot;Send an email to all users&quot;
&lt;/div&gt;&lt;div class='line'&gt;task :email_users =&gt; :environment do
&lt;/div&gt;&lt;div class='line'&gt;  raise &quot;No template provided. Please set TEMPLATE=file_name&quot; if ENV['TEMPLATE'].blank?
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;  template  = File.read ENV['TEMPLATE']
&lt;/div&gt;&lt;div class='line'&gt;  subject   = ENV['SUBJECT'] || &quot;Hello from Codaset&quot;
&lt;/div&gt;&lt;div class='line'&gt;  
&lt;/div&gt;&lt;div class='line'&gt;  if ENV['TEST']
&lt;/div&gt;&lt;div class='line'&gt;    name = 'Joel Test'
&lt;/div&gt;&lt;div class='line'&gt;    Pony.mail :to =&gt; 'joel@developwithstyle.com', :from =&gt; &quot;Codaset &amp;lt;help@codaset.com&gt;&quot;, :subject =&gt; subject, :body =&gt; ERB.new(template).result(binding)
&lt;/div&gt;&lt;div class='line'&gt;    puts &quot;Email test ('#{subject}') sent to joel@developwithstyle.com&quot;
&lt;/div&gt;&lt;div class='line'&gt;  else
&lt;/div&gt;&lt;div class='line'&gt;    User.find_each do |user|
&lt;/div&gt;&lt;div class='line'&gt;      unless user.email.blank?
&lt;/div&gt;&lt;div class='line'&gt;        name = user.title
&lt;/div&gt;&lt;div class='line'&gt;        Pony.mail :to =&gt; user.email, :from =&gt; &quot;Codaset &amp;lt;help@codaset.com&gt;&quot;, :subject =&gt; subject, :body =&gt; ERB.new(template).result(binding)
&lt;/div&gt;&lt;div class='line'&gt;        puts &quot;Email ('#{subject}') sent to #{user.email}&quot;
&lt;/div&gt;&lt;div class='line'&gt;      end
&lt;/div&gt;&lt;div class='line'&gt;    end
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;end&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;This simply loops through each user in the database, and sends them an email. The body of the email is built using a templated file, that uses ERB. Which means I can use it as a normal view template. I run it like this:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;rake email_users RAILS_ENV=production TEMPLATE=my_email_template.txt SUBJECT='Look at my email i sent ya!'&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <title>Concerned with Rails</title>
    <link href="http://developwithstyle.com/articles/2009/10/13/concerned-with-rails/"/>
    <updated>2009-10-13T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2009/10/13/concerned-with-rails</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://codaset.com/joelmoss/rails-concerns&quot;&gt;Concerns&lt;/a&gt; is a simple Rails plugin that provides you with a simple way to organise your Controllers, Models and Mailers, and split them into smaller chunks of logic. It is especially useful when you have lengthly models, and get fed up with having to scroll through several hundred lines of code.&lt;/p&gt;




&lt;h3&gt;How does it work?&lt;/h3&gt;




&lt;p&gt;So let's say we have a Post model (doesn't everyone?!) which is getting a bit lengthy, and frankly not very nice to look at. With the Concerns plugin, we can split it up into nice little chunks. Because we have lots of validations, let's start by pulling them out and placing them within a concern file.&lt;/p&gt;




&lt;h3&gt;Let's get going then...&lt;/h3&gt;




&lt;p&gt;First of all, install the plugin:&lt;/p&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
script/plugin install git://codaset.com/joelmoss/rails-concerns.git
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;Then, create a new directory in your app/models drectory and call it &quot;post&quot;, which is the same name as your model.&lt;/p&gt;




&lt;p&gt;Within this new directory, create a new file at app/models/post/validations.rb. Now all this should do is reopen your Post model, and define your validations like this:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;class Post &amp;lt; ActiveRecord::Base
&lt;/div&gt;&lt;div class='line'&gt;  validates_presence_of :title, :body
&lt;/div&gt;&lt;div class='line'&gt;  validates_uniqueness_of :title, :scope =&gt; :project_id, :case_sensitive =&gt; false
&lt;/div&gt;&lt;div class='line'&gt;  validates_exclusion_of :title, :in =&gt; %w(edit new blog delete destroy create update post posts)
&lt;/div&gt;&lt;div class='line'&gt;  validates_inclusion_of :markup_language, :in =&gt; %w( markdown textile wikitext ), :allow_nil =&gt; true
&lt;/div&gt;&lt;div class='line'&gt;end&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;It's just like writing your model again.&lt;/p&gt;




&lt;p&gt;Now within your main Post model; right at the top, we simply call:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;concerned_with :validations&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;Multiple concerns can be called like so:&lt;/p&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;concerned_with :validations, :class_methods&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;




&lt;p&gt;And we're done!&lt;/p&gt;




&lt;p&gt;You can do this as many times as you wish, and with as many concerns as you want. And it works with models, controllers and mailers.
Need help?&lt;/p&gt;




&lt;p&gt;Grab and/or fork the code from the &lt;a href=&quot;http://codaset.com/joelmoss/rails-concerns&quot;&gt;Codaset project&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Codaset Opens up its Beta to Everyone.</title>
    <link href="http://developwithstyle.com/articles/2009/10/06/codaset-opens-up-its-beta-to-everyone/"/>
    <updated>2009-10-06T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2009/10/06/codaset-opens-up-its-beta-to-everyone</id>
    <content type="html">&lt;p&gt;This is a reprint of an announcement made a few minutes ago at &lt;a href=&quot;http://codaset.com&quot;&gt;Codaset.com&lt;/a&gt;...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am very pleased to announce that Codaset has ended it's private beta phase, and is now open to all. The beta tag is still in place, so the site is effectively in public beta. This means that no invite is needed to register and create an account. Anyone can create projects, and anyone can take part in any activity on the site.&lt;/p&gt;

&lt;p&gt;Along with this announcement, also brings with it a few bug fixes, and minor improvements. Nothing huge, but you should find that browsing the site in Safari is much improved, and several styling bugs have been fixed. I also added URL slugs to milestones, which means your Milestones look prettier and are more familiar to browse.&lt;/p&gt;

&lt;p&gt;So I am hoping that with this announcement and release, we will start to see an increase in the number of registered users, and active users. And of course, Codaset is one step closer to a final release. So if there are any features you want to see in the final release; and if there is not already a ticket for it, please create one now. If there is a ticket already created for your requested feature, please vote it up. Voting for tickets is the best way for me to see what you want.&lt;/p&gt;

&lt;p&gt;You can see Codaset's tickets at &lt;a href=&quot;http://codaset.com/tickets&quot;&gt;http://codaset.com/tickets&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>
  </entry>
  
  <entry>
    <title>Railings: A full featured Ruby on Rails template</title>
    <link href="http://developwithstyle.com/articles/2009/09/23/railings-a-full-featured-ruby-on-rails-template/"/>
    <updated>2009-09-23T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2009/09/23/railings-a-full-featured-ruby-on-rails-template</id>
    <content type="html">&lt;p&gt;I've found myself creating a number of new Rails apps as of late, and found it very cumbersome to set each one up with my favoured list of gems and plugins. So I created my own Rails Template.&lt;/p&gt;
&lt;p&gt;Rails templates are single ruby scripts which contain a few commands that help you setup any new Rails app in a snap. So you can specify a list of Gems to have installed and part of your environment.rb, and also install a bunch of plugins, amongst other things.&lt;/p&gt;
&lt;p&gt;You should take a look at &lt;a href=&quot;http://m.onkey.org/2008/12/4/rails-templates&quot;&gt;Pratik Naik's blog post&lt;/a&gt; for full details on what Rails templates can do.&lt;/p&gt;
&lt;p&gt;So my default Rails template is called &lt;a href=&quot;http://codaset.com/joelmoss/railings&quot;&gt;Railings&lt;/a&gt;, and is available now on &lt;a href=&quot;http://codaset.com/joelmoss/railings&quot;&gt;Codaset&lt;/a&gt;. It is sure to grow by the day, but for now, this is what you get:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jQuery 1.3.2&lt;/li&gt;
  &lt;li&gt;Blueprint CSS Framework&lt;/li&gt;
  &lt;li&gt;Initializes as a Git repo and creates .gitignore&lt;/li&gt;
  &lt;li&gt;Creates staging environment&lt;/li&gt;
  &lt;li&gt;Creates application layout&lt;/li&gt;
  &lt;li&gt;A default database.yml, and a modified database.example.yml which is ued with the 'Wheres my database.yml dude?' rake task&lt;/li&gt;
  &lt;li&gt;Creates Vlad the Deployer deploy.rb config file&lt;/li&gt;
  &lt;li&gt;Time formats initializer&lt;/li&gt;
  &lt;li&gt;The following gems:
    &lt;ul&gt;
      &lt;li&gt;thoughtbot-factory_girl&lt;/li&gt;
      &lt;li&gt;rubyist-aasm&lt;/li&gt;
      &lt;li&gt;mislav-will_paginate&lt;/li&gt;
      &lt;li&gt;hpricot&lt;/li&gt;
      &lt;li&gt;RedCloth&lt;/li&gt;
      &lt;li&gt;emk-safe_erb&lt;/li&gt;
      &lt;li&gt;settingslogic&lt;/li&gt;
      &lt;li&gt;vlad&lt;/li&gt;
      &lt;li&gt;vlad-git&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The following plugins setup as Git submodules:
    &lt;ul&gt;
      &lt;li&gt;limerick_rake&lt;/li&gt;
      &lt;li&gt;mile_marker&lt;/li&gt;
      &lt;li&gt;squirrel&lt;/li&gt;
      &lt;li&gt;rspec&lt;/li&gt;
      &lt;li&gt;rspec-rails&lt;/li&gt;
      &lt;li&gt;exception_notifier&lt;/li&gt;
      &lt;li&gt;monkey-magic&lt;/li&gt;
      &lt;li&gt;gravatar&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the next time you start a new rails app, run this command and you will have the world at your fingertips:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
rails -m http://codaset.com/joelmoss/railings/source/master/raw/railings.rb /path/to/mynewapp
&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  
</feed>
