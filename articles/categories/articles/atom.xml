<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: articles | Develop With Style]]></title>
  <link href="http://developwithstyle.com/articles/categories/articles/atom.xml" rel="self"/>
  <link href="http://developwithstyle.com/"/>
  <updated>2012-05-23T15:23:19+01:00</updated>
  <id>http://developwithstyle.com/</id>
  <author>
    <name><![CDATA[Joel Moss]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lessons learnt from building a REST API]]></title>
    <link href="http://developwithstyle.com/articles/2012/05/23/lessons-learnt-from-building-a-rest-based-api/"/>
    <updated>2012-05-23T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2012/05/23/lessons-learnt-from-building-a-rest-based-api</id>
    <content type="html"><![CDATA[<p>Late last year, I built a REST based API for <a href="http://www.shermanstravel.com">ShermansTravel</a> using Rails and <a href="https://github.com/fabrik42/acts_as_api">ActsAsAPI</a>. The API allowed us to tag and/or geotag any object, and was backed with <a href="http://mongodb.org">MongoDB</a> and a little MySQL for authentication. The API itself was - and still is - sound, but unfortunately it turned out to be very slow. This was amplified even further due to its use by another REST based API.</p>

<p>These last few weeks have allowed me to revisit the application, and to make changes to speed things up, often-times resulting in a 400% speed increase, not to mention increased concurrency. This post will briefly detail the lessons learnt building a high trafficked API, and what changes I have made.</p>

<!-- more -->


<p>Please note, that this post is very Ruby-centric, so only considers what is available to the Rubyist.</p>

<h3>1. Don't use Rails</h3>

<p>Rails is awesome... for most things. But when you don't need any views or assets, or when you are not building a traditional web application, it's overkill. And you'll soon start finding that your app is slow. You have to remember that Rails is a full stack framework, but your API is most likely not.</p>

<p>If you really have to use a Framework, check out <a href="http://sinatrarb.com">Sinatra</a>, which has a much smaller footprint. Or peel it back even further, and create a bare bones Rack app. Which is a lot easier than you might think.</p>

<h3>2. Don't use ActiveRecord</h3>

<p>I hate to say this, but ActiveRecord is slow! In fact, most ORM's are usually much, much slower than using raw SQL. However, if your API uses MySQL heavily, you may not want to write the SQL yourself, and enjoy the huge conveniance that AR gives you. But you may be surprised how you can build yourself a little code that emulates a little of the AR API.</p>

<p>For example, in my API rewrite, I can still do this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deal</span> <span class="o">=</span> <span class="no">Deal</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">deal</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;category = &#39;hotel&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;created_at DESC&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">deal</span><span class="o">.</span><span class="n">run_query</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And this is my <code>Deal</code> model:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Deal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">where</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@where_array ||= []</span>
</span><span class='line'><span class="sr">@where_array &amp;lt;&amp;lt; sql</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@select_array ||= []</span>
</span><span class='line'><span class="sr">@select_array &amp;lt;&amp;lt; sql</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">joins</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@joins_array ||= []</span>
</span><span class='line'><span class="sr">@joins_array &amp;lt;&amp;lt; sql</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">order</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@order_array ||= []</span>
</span><span class='line'><span class="sr">@order_array &amp;lt;&amp;lt; sql</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># Run the SQL query.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run_query</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;connection.query build_sql</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Builds the full SQL query.</span>
</span><span class='line'><span class="sr">#</span>
</span><span class='line'><span class="sr"># Returns the SQL statement as a String.</span>
</span><span class='line'><span class="sr">def build_sql</span>
</span><span class='line'><span class="sr">  _select = @select_array || [&#39;*&#39;]</span>
</span><span class='line'><span class="sr">  sql = &quot;SELECT </span><span class="si">#{</span><span class="n">_select</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span><span class="si">}</span><span class="sr"> FROM `places` &quot;</span>
</span><span class='line'><span class="sr">  sql &amp;lt;&amp;lt; @joins_array.join(&#39; &#39;) unless @joins_array.blank?</span>
</span><span class='line'><span class="sr">  sql &amp;lt;&amp;lt; &quot; WHERE </span><span class="si">#{</span><span class="vi">@where_array</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; AND &#39;</span><span class="p">)</span><span class="si">}</span><span class="sr">&quot; unless @where_array.blank?</span>
</span><span class='line'><span class="sr">  sql &amp;lt;&amp;lt; &quot; ORDER BY </span><span class="si">#{</span><span class="vi">@order_array</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="sr">&quot; unless @order_array.blank?</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  unset_sql_variables</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  sql</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def unset_sql_variables</span>
</span><span class='line'><span class="sr">  @where_array, @select_array, @joins_array, @order_array = nil</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def connection</span>
</span><span class='line'><span class="sr">  # your database connection</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Very basic, but does the job nicely. My <code>connection</code> method simply uses the <a href="https://github.com/brianmario/mysql2">MySQL2</a> Ruby Gem, which has very little overhead.</p>

<h3>3. Increase concurrency and use EventMachine</h3>

<p>This one is a biggie, but an absolute must, and is the biggest performance boost I have received so far.</p>

<p><a href="http://rubyeventmachine.com/">EventMachine</a> is a fast, simple event-processing library in a similar vein to Node.JS. But it's all Ruby! It allows you to take advantage of threaded network programming, thus increasing concurrency, scalability and performance.</p>

<p>Unfortunately, it has also involved some considerable rewriting, to ensure that my code is thread-safe, and that I take advantage of EventMachine as much as I can. However, the benefits have far exceeded this small cost. In fact, I now have a much smaller footprint all over my code, which also helps.</p>

<p>Not to get too specific, but my rewritten API uses the excellent <a href="http://postrank-labs.github.com/goliath/">Goliath</a> Ruby web server, along with the em-synchrony, em-http-request and em-mongo gems to help me make my API asynchronous. And fast!</p>

<h3>4. Use JSON... everywhere!</h3>

<p>There is a reason why JSON is now almost the data format of the web. It's lightweight, simple and fast. And Ruby support for it is top-notch. Just add the <a href="https://github.com/intridea/multi_json">MultiJson</a> and <a href="https://github.com/ohler55/oj">OJ</a> gems to your Gemfile, and you won't get much faster.</p>

<p>Unless you have a real need to use XML or another data format, all you need is JSON.</p>

<h4>In Conclusion...</h4>

<p>There are obviously smaller things to think about when building an API, but the above four were the biggest changes I made to the API, and so far they have made a huge improvement.</p>

<p>Keep it mean, keep it lean, keep it kean!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Right Way to Create an API]]></title>
    <link href="http://developwithstyle.com/articles/2011/07/12/the-right-way-to-create-an-api/"/>
    <updated>2011-07-12T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2011/07/12/the-right-way-to-create-an-api</id>
    <content type="html"><![CDATA[<p>I know, I know, it's been tooooo long. But whatever!</p>

<p>At <a href="http:///www.shermanstravel.com">Shermans</a> we have begun a large project to rebuild the architecture around the travel deals system. And guess what? we chose to do it all in Ruby! Yay!</p>

<p>The deals server (as we are calling the entire system) will consist of a few separate apps, mostly Rails. A few of these apps will be REST based web API's, allowing our partners and publishers to fetch deals. Surprisingly, there are very few Ruby Gems available to help with creating an API. But that probably has more to do with the great support for exposing resources built in to Rails using <code>respond_with</code> and co.</p>

<p>But based on my experience building the <a href="http://codaset.com">Codaset</a> <a href="http://api.codaset.com">API</a>, I knew I wanted a better way to expose the "views" for the API. For example, I don't want all attributes of my model to be exposed, and Rails doesn't provide a simple way to do that. Enter <a href="https://github.com/nesquena/rabl">RABL</a>!</p>

<!-- more -->


<p>RABL bills itself as an API templating language, but all it really is, is a way to expose and define your API attributes from within the view itself, which is exactly the way it should be done, as it is only the view that has any concern with this. Exposing or defining the attributes for the API is not the responsibility of the model or even the controller.</p>

<p>Let's say our controller assigns the <code>@posts</code> instance variable, which is thusly available in our view, and our view looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">collection</span> <span class="vi">@posts</span>
</span><span class='line'><span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:price</span>
</span><span class='line'><span class="n">child</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="n">attributes</span> <span class="ss">:full_name</span> <span class="p">}</span>
</span><span class='line'><span class="n">node</span><span class="p">(</span><span class="ss">:read</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="n">post</span><span class="o">.</span><span class="n">read_by?</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which would look like this as JSON:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[{</span>  <span class="nx">post</span> <span class="o">:</span>
</span><span class='line'>  <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">id</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span> <span class="nx">subject</span><span class="o">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">user</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">full_name</span> <span class="o">:</span> <span class="s2">&quot;...&quot;</span> <span class="p">},</span>
</span><span class='line'><span class="nx">read</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This means you don't have to dirty your controller with code that should be in your view.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Zero to Hero: How I built Twitious in Two Weeks]]></title>
    <link href="http://developwithstyle.com/articles/2010/10/28/from-zero-to-hero-how-i-built-twitious-in-two-weeks/"/>
    <updated>2010-10-28T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/10/28/from-zero-to-hero-how-i-built-twitious-in-two-weeks</id>
    <content type="html"><![CDATA[<p>... and that wasn't even part time!</p>




<p>I've been using <a href="http://twitter.com/joelmoss">Twitter</a> for quite a while now, and I have quickly found that every time I come across a site or web page of interest - I will tweet it.  And quite often, I have found myself either forgetting to add these links to my bookmarks in Firefox, or just not bothering. But that's not good, as also quite often, I remember I tweeted a link that I need to refer back to, but just can't remember the damn thing.</p>




<p>Twitter has become my primary means of bookmarking. But there is a problem with that - Twitter doesn't give me an easy way to see all those bookmarks. It is for that reason that I promptly set about building a web app that will make it easy for me to find all my tweeted links and organise them by hashtags.</p>




<!-- more -->




<p>I came up with the idea of <a href="http://twitious.com">Twitious</a> just two weeks ago, and it went live just three days ago, and now now has over 15,000 bookmarks! An achievement that I am extremely proud of. Don't get me wrong, it's not a complex app, but everything <a href="http://twitious.com">you see</a> was created from scratch by myself - part time. I have a very busy full time freelance job remember. Not to mention <a href="http://twitious.com">Codaset</a>.</p>




<p>The app was built with Rails 3 on Ruby 1.9.2. I originally had intended to use <a href="http://mongodb.org">MongoDB</a> as the data backend, but settled with the tried and tested MySQL setup. Simply because I didn't actually see a reason not to. It's running on an Ubuntu slice at <a href="http://slicehost.com">Slicehost</a>, under Nginx and Passenger 3. In fact, pretty much every part of the stack is the latest and greatest, which was really fun to do. (no legacy shit to deal with)</p>




<p>Obviously, the app communicates with the Twitter API quite a lot, as every time a user signs up for Twitious, the app needs to scan through the users entire timeline, and parse out any links and hash tags. And it also needs to do that on a regular basis to ensure Twitious shows the latest links from each users tweets. I needed to run all this as background tasks via some sort of queueing system. This was a bit of a no-brainer too. I went with my trusted old friend; <a http://github.com/defunkt/resque>Resque</a>, which I already use with Codaset.</p>




<p>There is plenty more that I want to do with Twitious, but I think it's already a really efficient way to create and manage your bookmarks; especially if you are already using Twitter. So please feel free to check out <a href="http://twitious.com">Twitious</a> and sign up. It's completely free, so why the hell not! And I would love to know what you think.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Form and Dynamic Errors for Rails 3]]></title>
    <link href="http://developwithstyle.com/articles/2010/08/09/dynamic-form-and-dynamic-errors-for-rails-3/"/>
    <updated>2010-08-09T09:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/08/09/dynamic-form-and-dynamic-errors-for-rails-3</id>
    <content type="html"><![CDATA[<p>Rails 3 is awesome! <strong>BUT</strong>...</p>




<p>For some unknown reason, the powers that be decided to remove the <code>error_message_on</code> and <code>error_messages_for</code> form helpers. I'm not sure about every one else, but I use these in pretty much every single form that I create, so I just have no idea why it was removed.</p>




<p>Fortunately, all is not lost. The code for these helpers was extracted out into a plugin called <a href="http://github.com/rails/dynamic_form">dynamic_form</a>. But unfortunately it doesn't seem to have been kept up to date, as the last commit was back on June 12th. Running the tests failed all over the place, simply because the HTML returned has changed slightly in the release candidate. So I took it upon myself to <a href="http://codaset.com/joelmoss/dynamic-form/">fork the code</a> and managed to get the tests passing with Rails 3 RC. I then also packaged it up into a <a href="http://rubygems.org/gems/dynamic_form">Gem</a> which you can <a href="http://rubygems.org/gems/dynamic_form">grab now and install</a> in your Rails 3 app.</p>




<p>My next task was to get the <a href="http://github.com/jeremydurham/custom-err-msg/">custom-err-msg</a> plugin working with Rails 3. But rather than fix and refactor that as it is, I decided to simply integrate it into the <a href="http://codaset.com/joelmoss/dynamic-form">dynamic_form</a> plugin, as it's functionality is closely related.</p>




<p>So the <a href="http://codaset.com/joelmoss/dynamic-form">dynamic_form</a> plugin has been enhanced a little, so please install and let me know what you think. I've put in a pull request to the official dynamic_form repo, so hopefully they will accept that soon. But in the meantime, you can still use my version by simply running <code>gem install dynamic_form</code> or adding to your Gemfile (if you are using Bundler) <code>gem "dynamic_form"</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Dates in MongoDB]]></title>
    <link href="http://developwithstyle.com/articles/2010/07/09/handling-dates-in-mongodb/"/>
    <updated>2010-07-09T00:00:00+01:00</updated>
    <id>http://developwithstyle.com/articles/2010/07/09/handling-dates-in-mongodb</id>
    <content type="html"><![CDATA[<p>I've been using <a href="http://www.mongodb.org/">MongoDB</a> quite a bit recently in several different projects, and it kicks ass. But the hardest thing to learn and to get used to with Mongo, is it's schemaless structure. With SQL databases like MySQL, you always have a defined and very rigid structure, which is of course the schema for each table you create. You create a table with a few columns; each column has a set type, a length, and a whole host of other variables.</p>




<p>It's this rigid structure that most of us have gotten used to for years, and that is the hardest thing to shake off when using NoSQL databases such as MongoDB.</p>




<p>But that is not to say that Mongo has no defined structure. In fact, that is far from the truth. Mongo and all schemaless databases have defined structure, but the difference is that that structure is defined by you. And that is what makes Mongo so cool. No need to actually create any tables and define each column - Just insert some data in your own defined way.</p>




<p>But there is a side effect of this schemaless idea. Even though you no longer have to define a schema in the traditional sense, you still have to think about the structure of each collection, and how that will look. In fact, there is a lot more to think about, as there are a lot more ways to structure your data with Mongo and other schemaless databases.</p>




<p>It's somewhat of a steep learning curve, but well worth sticking with. I'm still leaning the best ways to structure certain data types, and dates is one that I think I've nailed.</p>




<!--more-->




<p>Nearly all your collections will no doubt contain some sort of date or time stamp. While Mongo does have it's own native <code>Date()</code> object, it's only really useful within the Mongo shell. I need to use it within PHP and Ruby and other languages. Up until recently, I've been saving <code>datetime</code> as "<code>2010-07-09 13:56:31</code>". This works fine most of the time, but when you start needing to gather your data in more advanced ways, it starts to fall apart.</p>




<p>For example, I'm currently using Mongo and the equally awesome <a href="http://code.google.com/p/redis/">Redis</a> for logging data for <a href="http://quicksearch.shermanstravel.com">ShermansTravel.com</a>. I needed to log a bunch of data each time a user clicks one of our paying ads. I ended up with collection records like this: (in PHP, as that is what this project calls for unfortunately)</p>




<div class="highlight"><pre><code class="javascript">
  {
    "_id" : ObjectId("4bfea7246c6151d127f80100"),
    "button_rank" : "5",
    "category" : "flights",
    "class" : "Economy",
    "cpc" : "0.17",
    "destination_place_id" : "197868",
    "from_code" : "ORD",
    "from_code_include_nearby" : false,
    "travelers" : "1",
    "created" : "2010-03-29 20:15:34"
  }
</code></pre></div>




<p>Notice the the <code>created</code> timestamp on the last line there. Nothing special there, and I can find by the <code>created</code> date without any issue at all. But I need to now count all clicks grouped by day, not time. This is where the above falls apart.</p>




<p>This is what I tried:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">  $keys = new MongoCode(&#39;function(doc) { return { created: doc.created.split(&quot; &quot;)[0] }; }&#39;);</span>
</span><span class='line'><span class="x">  $reduce = new MongoCode(&#39;function(doc, prev) { prev.count++; }&#39;);</span>
</span><span class='line'><span class="x">  $clicks = $this-&gt;group($keys, array(&#39;count&#39; =&gt; 0), $reduce);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Again, this works... almost! This week, the clicks collection ended up with 900,000 records, and using the above group query kept timing out. The problem is the second line where instead of simply specifying which key(s) to group by, I have to pass a PHP MongoCode object containing a Javascript function that creates and returns a custom key. In this case, I am simply grabbing the <code>created</code> key of each record, and splitting the string, so I have the date and the time. I then return the date only, and can now group by date. This means that Mongo is iterating over every record and applying that function to each one, which obviously can take some time on larger collections, and completely ignores any indexes you may have created.</p>




<p>So I quickly determined from this that I was storing the date and time in the wrong way. I need to split up the date and time. I now have this:</p>




<div class="highlight"><pre><code class="javascript">
  {
    "_id" : ObjectId("4bfea7246c6151d127f80100"),
    "button_rank" : "5",
    "category" : "flights",
    "class" : "Economy",
    "cpc" : "0.17"
    "destination_place_id" : "197868",
    "from_code" : "ORD",
    "from_code_include_nearby" : false,
    "travelers" : "1",
    "created" : { "d" : "2010-03-29", "t" : "20:15:34" }
  }
</code></pre></div>




<p>The last line still shows the <code>created</code> date and time, but instead stores each in an embedded object or hash. This means that I can still find by <code>created</code> date and time with just a little change, but more importantly, it means I can group much easier and much, much faster:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">  $key = array(&#39;created.d&#39; =&gt; 1);</span>
</span><span class='line'><span class="x">  $reduce = new MongoCode(&#39;function(doc, prev) { prev.count++; }&#39;);</span>
</span><span class='line'><span class="x">  $clicks = $this-&gt;group($key, array(&#39;count&#39; =&gt; 0), $reduce);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can from the second line in the above, I am no longer passing a function to build the key I want to group by - which was what was causing the problem. I now simply pass the key I want to group by: <code>created.d</code>. The code is leaner and the query is loads faster, and my indexes are respected.</p>

]]></content>
  </entry>
  
</feed>
